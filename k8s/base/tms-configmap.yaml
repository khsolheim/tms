apiVersion: v1
kind: ConfigMap
metadata:
  name: tms-config
  namespace: tms
  labels:
    app: tms
    component: config
data:
  # Application Configuration
  app.json: |
    {
      "name": "TMS - Traffic Management System",
      "version": "1.0.0",
      "environment": "production",
      "features": {
        "caching": true,
        "monitoring": true,
        "security": true,
        "rateLimit": true,
        "audit": true
      },
      "performance": {
        "maxConnections": 1000,
        "requestTimeout": 30000,
        "keepAliveTimeout": 5000,
        "headersTimeout": 60000
      }
    }
  
  # Logging Configuration
  logging.json: |
    {
      "level": "info",
      "format": "json",
      "transports": [
        {
          "type": "console",
          "level": "info"
        },
        {
          "type": "file",
          "level": "error",
          "filename": "/app/logs/error.log",
          "maxsize": "10MB",
          "maxFiles": 5
        },
        {
          "type": "file",
          "level": "info",
          "filename": "/app/logs/combined.log",
          "maxsize": "10MB",
          "maxFiles": 10
        }
      ],
      "meta": true,
      "timestamp": true,
      "colorize": false
    }
  
  # Security Configuration
  security.json: |
    {
      "cors": {
        "origin": ["https://tms.example.com", "https://admin.tms.example.com"],
        "credentials": true,
        "optionsSuccessStatus": 200
      },
      "helmet": {
        "contentSecurityPolicy": {
          "directives": {
            "defaultSrc": ["'self'"],
            "styleSrc": ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            "fontSrc": ["'self'", "https://fonts.gstatic.com"],
            "imgSrc": ["'self'", "data:", "https:"],
            "scriptSrc": ["'self'"],
            "objectSrc": ["'none'"],
            "upgradeInsecureRequests": []
          }
        },
        "hsts": {
          "maxAge": 31536000,
          "includeSubDomains": true,
          "preload": true
        }
      },
      "rateLimit": {
        "windowMs": 900000,
        "max": 1000,
        "message": "For mange foresp√∏rsler fra denne IP-adressen",
        "standardHeaders": true,
        "legacyHeaders": false
      }
    }
  
  # Cache Configuration
  cache.json: |
    {
      "redis": {
        "keyPrefix": "tms:",
        "ttl": 3600,
        "maxRetriesPerRequest": 3,
        "retryDelayOnFailover": 100,
        "enableOfflineQueue": false,
        "lazyConnect": true
      },
      "memory": {
        "max": 1000,
        "ttl": 600000,
        "checkperiod": 120000
      },
      "profiles": {
        "static": { "ttl": 86400 },
        "dynamic": { "ttl": 300 },
        "user": { "ttl": 1800 },
        "api": { "ttl": 60 }
      }
    }
  
  # Database Configuration
  database.json: |
    {
      "pool": {
        "min": 2,
        "max": 10,
        "acquireTimeoutMillis": 60000,
        "createTimeoutMillis": 30000,
        "destroyTimeoutMillis": 5000,
        "idleTimeoutMillis": 30000,
        "reapIntervalMillis": 1000,
        "createRetryIntervalMillis": 200
      },
      "migrations": {
        "directory": "./prisma/migrations",
        "tableName": "_prisma_migrations"
      },
      "logging": {
        "queries": false,
        "errors": true,
        "warnings": true,
        "info": false
      }
    }
  
  # Monitoring Configuration
  monitoring.json: |
    {
      "prometheus": {
        "enabled": true,
        "path": "/metrics",
        "collectDefaultMetrics": true,
        "customMetrics": {
          "httpRequestDuration": true,
          "httpRequestTotal": true,
          "databaseConnections": true,
          "cacheHitRate": true,
          "securityEvents": true
        }
      },
      "healthCheck": {
        "path": "/api/health",
        "readinessPath": "/api/ready",
        "checks": {
          "database": true,
          "redis": true,
          "external": false
        }
      }
    }
  
  # Nginx Configuration
  nginx.conf: |
    upstream tms_backend {
        least_conn;
        server tms-backend:4000 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 80;
        server_name tms.example.com;
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name tms.example.com;
        
        ssl_certificate /etc/ssl/certs/tms.crt;
        ssl_certificate_key /etc/ssl/private/tms.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
        ssl_prefer_server_ciphers off;
        
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        client_max_body_size 10M;
        client_body_timeout 60s;
        client_header_timeout 60s;
        
        location / {
            proxy_pass http://tms_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        location /api/health {
            proxy_pass http://tms_backend;
            access_log off;
        }
        
        location /metrics {
            proxy_pass http://tms_backend;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    } 