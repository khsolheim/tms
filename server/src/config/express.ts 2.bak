import express, { Express } from "express";
import cors from "cors";
import morgan from "morgan";
import path from "path";
import { stream } from "../utils/logger";

import { corsOptions } from "./cors";
import { requestIdMiddleware } from "../middleware/requestId";
import { combinedSecurityMiddleware, generalRateLimit } from "../middleware/security";
import { protectionProfiles } from "../middleware/apiProtection";
import { 
  securityMiddleware, 
  corsMiddleware, 
  helmetMiddleware,
  authSecurityMiddleware,
  apiSecurityMiddleware,
  adminSecurityMiddleware 
} from "../middleware/security";
import { tmsApiVersioning } from "../middleware/apiVersioning";
import { validationFailureLoggingMiddleware, commonValidationErrorsMiddleware } from "../middleware/validationMonitoring";
import { performanceMiddleware } from "../middleware/performance";
import { errorHandler } from "../middleware/errorHandler";
import { 
  loggingMiddleware, 
  securityLoggingMiddleware, 
  auditLoggingMiddleware, 
  errorLoggingMiddleware 
} from "../middleware/logging";
import { createCacheMiddleware, createCacheInvalidationMiddleware, cacheConfigs } from '../middleware/caching';
import { setupSwagger } from "./swagger";

export function configureExpress(): Express {
  const app = express();

  // Request ID middleware - må være først
  app.use(requestIdMiddleware);

  // Enhanced logging middleware - strukturert logging med context
  app.use(loggingMiddleware({
    logBody: false, // Ikke logg request body som standard
    logHeaders: false, // Ikke logg headers som standard
    logQuery: true, // Logg query parameters
    skipPaths: ['/health', '/metrics', '/favicon.ico'],
    sensitiveFields: ['password', 'passord', 'token', 'secret', 'authorization']
  }));

  // Security logging middleware - detekterer mistenkelig aktivitet
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(securityLoggingMiddleware);

  // Audit logging middleware - logger kritiske operasjoner
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(auditLoggingMiddleware);

  // Performance monitoring - sporer responstider og detekterer slow queries
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(performanceMiddleware);

  // Helmet security headers
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(helmetMiddleware);

  // Advanced security middleware - threat detection, IP blocking, pattern matching
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(securityMiddleware);

  // Security middleware - aktiverer XSS, SQL injection, command injection, path traversal protection
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(combinedSecurityMiddleware);

  // Enhanced API protection - rate limiting, threat detection, input sanitization
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use('/api/auth', authSecurityMiddleware, protectionProfiles.authentication);
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use('/api/admin', adminSecurityMiddleware, protectionProfiles.maximum);
  // app.use('/api/security', adminSecurityMiddleware, protectionProfiles.maximum);
  // app.use('/api', apiSecurityMiddleware, protectionProfiles.standard);

  // API versioning middleware - håndterer versjonering og deprecation
  app.use('/api', tmsApiVersioning);

  // Validation monitoring - logger og sporer validation failures
  app.use(validationFailureLoggingMiddleware);
  app.use(commonValidationErrorsMiddleware);

  // Global rate limiting
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(generalRateLimit);

  // HTTP request logging med Morgan
  app.use(morgan('combined', { stream }));

  // CORS configuration with enhanced security
  // TEMPORARILY DISABLED FOR DEVELOPMENT
  // app.use(corsMiddleware);
  app.use(cors()); // Use simple CORS instead

  app.use(express.json());

  // ============================================================================
  // CACHING MIDDLEWARE
  // ============================================================================
  
  // Apply caching with different profiles based on routes
  
  // Long-term caching for reference data
  app.use('/api/reference', createCacheMiddleware(cacheConfigs.long));
  app.use('/api/systemconfig', createCacheMiddleware(cacheConfigs.long));
  
  // Company-specific caching
  app.use('/api/bedrifter', createCacheMiddleware(cacheConfigs.company));
  app.use('/api/selskap', createCacheMiddleware(cacheConfigs.company));
  
  // User-specific caching
  app.use('/api/bruker', createCacheMiddleware(cacheConfigs.user));
  app.use('/api/profil', createCacheMiddleware(cacheConfigs.user));
  
  // Medium-term caching for semi-static data
  app.use('/api/quiz', createCacheMiddleware(cacheConfigs.medium));
  app.use('/api/sikkerhetskontroll', createCacheMiddleware(cacheConfigs.medium));
  app.use('/api/rapporter', createCacheMiddleware(cacheConfigs.medium));
  
  // Short-term caching for frequently changing data
  app.use('/api/oppgaver', createCacheMiddleware(cacheConfigs.short));
  app.use('/api/kalender', createCacheMiddleware(cacheConfigs.short));
  app.use('/api/notifikasjoner', createCacheMiddleware(cacheConfigs.short));

  // ============================================================================
  // CACHE INVALIDATION MIDDLEWARE
  // ============================================================================
  
  // Invalidate company cache on company data changes
  app.use('/api/bedrifter', createCacheInvalidationMiddleware(['company-data', 'table:bedrift']));
  app.use('/api/selskap', createCacheInvalidationMiddleware(['company-data', 'table:selskap']));
  
  // Invalidate user cache on user data changes
  app.use('/api/bruker', createCacheInvalidationMiddleware(['user-data', 'table:bruker']));
  app.use('/api/ansatt', createCacheInvalidationMiddleware(['user-data', 'table:ansatt']));
  
  // Invalidate quiz cache on quiz changes
  app.use('/api/quiz', createCacheInvalidationMiddleware(['table:quiz', 'table:quiz_kategori']));
  
  // Invalidate safety control cache
  app.use('/api/sikkerhetskontroll', createCacheInvalidationMiddleware(['table:sikkerhetskontroll', 'table:kontroll_mal']));

  // Serve static files fra uploads mappen
  app.use('/uploads', express.static(path.join(__dirname, '../../uploads')));

  // ============================================================================
  // API DOCUMENTATION
  // ============================================================================
  
  // Setup Swagger API documentation
  setupSwagger(app);

  return app;
}

export function configureErrorHandling(app: Express): void {
  // 404 handler - må være etter alle routes
  app.use((req, res) => {
    res.status(404).json({
      error: {
        code: 'NOT_FOUND',
        message: 'Endpoint ikke funnet',
        statusCode: 404,
        requestId: (req as any).requestId || 'unknown',
        timestamp: new Date().toISOString()
      }
    });
  });

  // Error logging middleware - logger alle feil med full context
  app.use(errorLoggingMiddleware);

  // Global error handler - må være sist
  app.use(errorHandler);
} 