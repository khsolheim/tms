import 'dotenv/config';
import express from "express";
import cors from "cors";
import path from "path";
import { PrismaClient } from '@prisma/client';
import { handleUploadError } from "./middleware/upload";
import { errorHandler } from './middleware/errorHandler';
import {
  authRouter,
  brukereRouter,
  bedriftRouter,
  elevRouter,
  br√∏nn√∏ysundRouter,
  emailRouter,
  ansattRouter,
  sikkerhetskontrollRouter,
  quizRouter,
  bilderRouter,
  sjekkpunktRouter,
  systemConfigRouter,
  kontrollmalRouter,
  kontraktRouter,
  integrationsRouter
} from "./routes";
import { sikkerhetskontrollLaeringRouter } from "./routes";

const prisma = new PrismaClient();

// Security middleware
import { 
  securityHeaders, 
  apiRateLimit, 
  sanitizeInput, 
  requestSizeLimit 
} from './middleware/security.middleware';

// Cache middleware
import { apiCache } from './middleware/cache.middleware';

const app = express();

// ============================================================================
// SECURITY CONFIGURATION
// ============================================================================

// Basic security headers
app.use(securityHeaders);

// Request size limiting
app.use(requestSizeLimit('10mb'));

// Input sanitization
app.use(sanitizeInput);

// Rate limiting
app.use(apiRateLimit);

// ============================================================================
// STANDARD MIDDLEWARE
// ============================================================================

// CORS configuration
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? process.env.FRONTEND_URL 
    : ['http://localhost:3000', 'http://localhost:5173'],
  credentials: true,
}));

// Body parsing with size limits
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Serve static files fra uploads mappen
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// Routes
app.use("/api/auth", authRouter);
app.use("/api/users", brukereRouter);
app.use("/api/brukere", brukereRouter); // Alias for /users
app.use("/api/bedrifter", bedriftRouter);
app.use("/api/bedrift", bedriftRouter); // Alias for /bedrifter
app.use("/api/elever", elevRouter);
app.use("/api/bronnoysund", br√∏nn√∏ysundRouter);
app.use("/api/email", emailRouter);
app.use("/api/ansatt", ansattRouter);
app.use("/api/sikkerhetskontroll", sikkerhetskontrollRouter);
app.use("/api/sikkerhetskontroll-laering", sikkerhetskontrollLaeringRouter);
app.use("/api/quiz", quizRouter);
app.use("/api/bilder", bilderRouter);
app.use("/api/sjekkpunkt", sjekkpunktRouter);
app.use("/api/systemconfig", systemConfigRouter);
app.use("/api/kontrollmal", kontrollmalRouter);
app.use("/api/kontrakt", kontraktRouter);

// Error handling
app.use(handleUploadError);

// ============================================================================
// ERROR HANDLING
// ============================================================================

app.use(errorHandler);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Rute ikke funnet',
    path: req.originalUrl,
  });
});

// ============================================================================
// SERVER STARTUP
// ============================================================================

const PORT = process.env.PORT || 3001;

const startServer = async () => {
  try {
    // Test database connection
    await prisma.$connect();
    console.log('‚úÖ Database connected successfully');

    // Start server
    app.listen(PORT, () => {
      console.log(`üöÄ Server running on port ${PORT}`);
      console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîí Security middleware active`);
      console.log(`‚ö° Cache middleware active`);
    });
  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
};

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('‚è≥ SIGTERM received, shutting down gracefully...');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('‚è≥ SIGINT received, shutting down gracefully...');
  await prisma.$disconnect();
  process.exit(0);
});

startServer();

export default app; 