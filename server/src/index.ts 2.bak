import 'dotenv/config';
import { setupContainer } from './container';
import { configureExpress, configureErrorHandling } from './config/express';
import { configureRoutes } from './config/routes';
import { startServer, configureProcessHandlers } from './config/server';
import { validateEnvironment } from './config/environment';
import { databaseManager, disconnectDatabase } from './config/database';
import { eventRegistry } from './events/eventRegistry';
import { eventBus, EventType } from './events/eventBus';
import logger from './utils/logger';

async function bootstrap() {
  try {
    // Validate environment variables first
    validateEnvironment();
    
    // Initialize Event-Driven Architecture
    console.log('ðŸŽ¯ Initializing Event-Driven Architecture...');
    eventRegistry.registerAllHandlers();
    
    // Publish system startup event
    await eventBus.publish(EventType.SYSTEM_STARTUP, {
      version: process.env.npm_package_version || '1.0.0',
      environment: process.env.NODE_ENV || 'development',
      timestamp: new Date()
    });
    
    // Initialize database manager
    await databaseManager.initialize();
    logger.info('Database manager initialisert');

    // Setup dependency injection container
    setupContainer();

    // Configure Express app
    const app = configureExpress();

    // Configure all routes
    configureRoutes(app);

    // Configure error handling (must be last)
    configureErrorHandling(app);

    // Configure process handlers
    configureProcessHandlers();

    // Start server
    startServer(app);

    console.log('âœ… Event-Driven Architecture initialized successfully!');

  } catch (error) {
    logger.error('Feil under oppstart av server', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });
    
    // Publish system error event
    eventBus.publish(EventType.SYSTEM_ERROR, {
      error: error instanceof Error ? error.message : 'Unknown error',
      context: 'application_startup',
      timestamp: new Date()
    }).catch(console.error);
    
    process.exit(1);
  }
}

// Start application
bootstrap(); 