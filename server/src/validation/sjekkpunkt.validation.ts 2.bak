import { z } from 'zod';

// Enum verdier basert på database schema og backend usage
const systemEnum = z.enum(['MOTOR', 'BREMSER', 'LYSOMRYSYSTEM', 'DEKK', 'KAROSSERI', 'ELEKTRONIKK', 'SIKKERHET', 'MILJØ', 'KJØREKORT', 'GENERELL']);
const typeKontrollEnum = z.enum(['VISUELL', 'MEKANISK', 'ELEKTRONISK', 'MÅLING', 'TEST', 'DOKUMENT']);
const forerkortKlasseEnum = z.enum(['A', 'A1', 'A2', 'AM', 'B', 'BE', 'C', 'C1', 'CE', 'C1E', 'D', 'D1', 'DE', 'D1E', 'T']);

// Schema for opprettelse av sjekkpunkt
export const opprettSjekkpunktSchema = z.object({
  body: z.object({
    tittel: z.string()
      .min(1, 'Tittel er pakrevd')
      .max(200, 'Tittel kan ikke være lengre enn 200 tegn'),
    beskrivelse: z.string()
      .min(1, 'Beskrivelse er pakrevd')
      .max(2000, 'Beskrivelse kan ikke være lengre enn 2000 tegn'),
    system: systemEnum,
    typeKontroll: typeKontrollEnum,
    bildeUrl: z.string()
      .url('Ugyldig bilde URL')
      .max(500, 'Bilde URL kan ikke være lengre enn 500 tegn')
      .optional(),
    videoUrl: z.string()
      .url('Ugyldig video URL')
      .max(500, 'Video URL kan ikke være lengre enn 500 tegn')
      .optional(),
    rettVerdi: z.string()
      .max(100, 'Rett verdi kan ikke være lengre enn 100 tegn')
      .optional(),
    intervallKm: z.number()
      .int()
      .min(1, 'Intervall km må være et positivt tall')
      .max(1000000, 'Intervall km kan ikke overstige 1 000 000')
      .optional(),
    intervallTid: z.number()
      .int()
      .min(1, 'Intervall tid må være et positivt tall')
      .max(365, 'Intervall tid kan ikke overstige 365 dager')
      .optional(),
    forerkortklass: z.array(forerkortKlasseEnum)
      .max(15, 'Maksimalt 15 førerkortklasser tillatt')
      .default([]),
    konsekvens: z.array(z.string().max(200, 'Konsekvens kan ikke være lengre enn 200 tegn'))
      .max(10, 'Maksimalt 10 konsekvenser tillatt')
      .default([])
  })
});

// Schema for henting av sjekkpunkter med query parameters
export const getSjekkpunkterSchema = z.object({
  query: z.object({
    system: systemEnum.optional(),
    typeKontroll: typeKontrollEnum.optional(),
    sok: z.string()
      .min(1, 'Søketerm må være minst 1 tegn')
      .max(100, 'Søketerm kan ikke være lengre enn 100 tegn')
      .optional()
  })
});

// Schema for henting av spesifikt sjekkpunkt
export const getSjekkpunktSchema = z.object({
  params: z.object({
    id: z.string().regex(/^\d+$/, "ID må være et tall").transform(Number)
  })
});

// Schema for oppdatering av sjekkpunkt
export const oppdaterSjekkpunktSchema = z.object({
  params: z.object({
    id: z.string().regex(/^\d+$/, "ID må være et tall").transform(Number)
  }),
  body: z.object({
    tittel: z.string()
      .min(1, 'Tittel er pakrevd')
      .max(200, 'Tittel kan ikke være lengre enn 200 tegn')
      .optional(),
    beskrivelse: z.string()
      .min(1, 'Beskrivelse er pakrevd')
      .max(2000, 'Beskrivelse kan ikke være lengre enn 2000 tegn')
      .optional(),
    system: systemEnum.optional(),
    typeKontroll: typeKontrollEnum.optional(),
    bildeUrl: z.string()
      .url('Ugyldig bilde URL')
      .max(500, 'Bilde URL kan ikke være lengre enn 500 tegn')
      .optional()
      .nullable(),
    videoUrl: z.string()
      .url('Ugyldig video URL')
      .max(500, 'Video URL kan ikke være lengre enn 500 tegn')
      .optional()
      .nullable(),
    rettVerdi: z.string()
      .max(100, 'Rett verdi kan ikke være lengre enn 100 tegn')
      .optional()
      .nullable(),
    intervallKm: z.number()
      .int()
      .min(1, 'Intervall km må være et positivt tall')
      .max(1000000, 'Intervall km kan ikke overstige 1 000 000')
      .optional()
      .nullable(),
    intervallTid: z.number()
      .int()
      .min(1, 'Intervall tid må være et positivt tall')
      .max(365, 'Intervall tid kan ikke overstige 365 dager')
      .optional()
      .nullable(),
    forerkortklass: z.array(forerkortKlasseEnum)
      .max(15, 'Maksimalt 15 førerkortklasser tillatt')
      .optional(),
    konsekvens: z.array(z.string().max(200, 'Konsekvens kan ikke være lengre enn 200 tegn'))
      .max(10, 'Maksimalt 10 konsekvenser tillatt')
      .optional()
  })
});

// Schema for sletting av sjekkpunkt
export const slettSjekkpunktSchema = z.object({
  params: z.object({
    id: z.string().regex(/^\d+$/, "ID må være et tall").transform(Number)
  })
});

// Type exports
export type OpprettSjekkpunkt = z.infer<typeof opprettSjekkpunktSchema>;
export type OppdaterSjekkpunkt = z.infer<typeof oppdaterSjekkpunktSchema>;
export type GetSjekkpunkter = z.infer<typeof getSjekkpunkterSchema>;
export type GetSjekkpunkt = z.infer<typeof getSjekkpunktSchema>;
export type SlettSjekkpunkt = z.infer<typeof slettSjekkpunktSchema>; 