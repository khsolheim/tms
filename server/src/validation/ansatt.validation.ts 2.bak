import { z } from 'zod';
import { 
  epostSchema, 
  telefonSchema, 
  passordSchema,
  personnummerSchema,
  idSchema 
} from '../middleware/requestValidation';

// ============================================================================
// ANSATT VALIDATION SCHEMAS
// ============================================================================

// Roller enum
export const rollerEnum = z.enum([
  'ADMIN',
  'HOVEDBRUKER', 
  'BRUKER',
  'ELEV',
  'INSTRUKTOR',
  'LEKTOR'
]);

// Base ansatt schema (uten refine)
const baseAnsattSchema = z.object({
  fornavn: z.string()
    .min(1, 'Fornavn er pakrevd')
    .max(50, 'Fornavn kan ikke være lengre enn 50 tegn')
    .regex(/^[a-zA-ZæøåÆØÅ\s-]+$/, 'Fornavn kan kun inneholde bokstaver, mellomrom og bindestrek')
    .trim(),
  
  etternavn: z.string()
    .min(1, 'Etternavn er pakrevd')
    .max(50, 'Etternavn kan ikke være lengre enn 50 tegn')
    .regex(/^[a-zA-ZæøåÆØÅ\s-]+$/, 'Etternavn kan kun inneholde bokstaver, mellomrom og bindestrek')
    .trim(),
  
  epost: epostSchema,
  
  telefon: telefonSchema.optional().or(z.literal('')).transform(val => val === '' ? null : val),
  
  personnummer: personnummerSchema.optional().or(z.literal('')).transform(val => val === '' ? null : val),
  
  rolle: rollerEnum,
  
  bedriftId: idSchema,
  
  passord: passordSchema,
  
  // Valgfrie felt
  stilling: z.string()
    .max(100, 'Stilling kan ikke være lengre enn 100 tegn')
    .optional()
    .or(z.literal(''))
    .transform(val => val === '' ? null : val),
  
  avdeling: z.string()
    .max(100, 'Avdeling kan ikke være lengre enn 100 tegn')
    .optional()
    .or(z.literal(''))
    .transform(val => val === '' ? null : val),
  
  startdato: z.string()
    .regex(/^\d{4}-\d{2}-\d{2}$/, 'Startdato må være i format YYYY-MM-DD')
    .optional()
    .or(z.literal(''))
    .transform(val => val === '' ? null : val),
  
  sluttdato: z.string()
    .regex(/^\d{4}-\d{2}-\d{2}$/, 'Sluttdato må være i format YYYY-MM-DD')
    .optional()
    .or(z.literal(''))
    .transform(val => val === '' ? null : val),
  
  aktiv: z.boolean().default(true),
  
  // Tillatelser
  tillatelser: z.array(z.string()).optional().default([])
});

// Opprett ansatt schema (med refine)
export const opprettAnsattSchema = baseAnsattSchema.refine(data => {
  if (data.startdato && data.sluttdato) {
    return new Date(data.startdato) <= new Date(data.sluttdato);
  }
  return true;
}, 'Startdato må være før sluttdato');

// Oppdater ansatt schema (passord valgfritt ved oppdatering)
export const oppdaterAnsattSchema = baseAnsattSchema.partial().extend({
  id: idSchema.optional(),
  passord: passordSchema.optional()
});

// Login schema
export const loggInnSchema = z.object({
  epost: epostSchema,
  passord: z.string().min(1, 'Passord er pakrevd')
});

// Endre passord schema
export const endrePassordSchema = z.object({
  gammeltPassord: z.string().min(1, 'Gammelt passord er pakrevd'),
  nyttPassord: passordSchema,
  bekreftPassord: z.string().min(1, 'Bekreft passord er pakrevd')
}).refine(data => data.nyttPassord === data.bekreftPassord, {
  message: 'Passordene stemmer ikke overens',
  path: ['bekreftPassord']
});

// Tilbakestill passord schema
export const tilbakestillPassordSchema = z.object({
  epost: epostSchema
});

// Søk ansatte schema
export const sokAnsatteSchema = z.object({
  q: z.string()
    .min(1, 'Søketerm kan ikke være tom')
    .max(100, 'Søketerm kan ikke være lengre enn 100 tegn')
    .optional(),
  
  rolle: rollerEnum.optional(),
  
  avdeling: z.string().max(100).optional(),
  
  aktiv: z.string()
    .transform(val => val === 'true')
    .optional(),
  
  bedriftId: idSchema.optional(),
  
  side: z.string()
    .regex(/^\d+$/)
    .transform(Number)
    .default('1'),
  
  grense: z.string()
    .regex(/^\d+$/)
    .transform(Number)
    .refine(val => val <= 100, 'Maksimalt 100 ansatte per side')
    .default('10'),
  
  sortering: z.enum(['fornavn', 'etternavn', 'epost', 'rolle', 'opprettet', 'oppdatert'])
    .default('fornavn'),
  
  retning: z.enum(['asc', 'desc']).default('asc')
});

// Ansatt statistikk schema
export const ansattStatistikkSchema = z.object({
  fradato: z.string()
    .regex(/^\d{4}-\d{2}-\d{2}$/, 'Fra-dato må være i format YYYY-MM-DD')
    .optional(),
  
  tildato: z.string()
    .regex(/^\d{4}-\d{2}-\d{2}$/, 'Til-dato må være i format YYYY-MM-DD')
    .optional(),
  
  roller: z.array(rollerEnum).optional(),
  
  avdelinger: z.array(z.string()).optional(),
  
  bedriftId: idSchema.optional()
}).refine(data => {
  if (data.fradato && data.tildato) {
    return new Date(data.fradato) <= new Date(data.tildato);
  }
  return true;
}, 'Fra-dato må være før til-dato');

// Bulk operasjoner
export const bulkOppdaterAnsatteSchema = z.object({
  ansattIds: z.array(idSchema).min(1, 'Minst én ansatt må velges'),
  oppdateringer: z.object({
    rolle: rollerEnum.optional(),
    avdeling: z.string().max(100).optional(),
    aktiv: z.boolean().optional(),
    tillatelser: z.array(z.string()).optional()
  }).refine(data => Object.keys(data).length > 0, 'Minst ett felt må oppdateres')
});

// Import ansatte schema
export const importAnsatteSchema = z.object({
  ansatte: z.array(baseAnsattSchema.omit({ passord: true }).extend({
    passord: z.string().optional() // Passord kan genereres automatisk
  }))
    .min(1, 'Minst én ansatt må importeres')
    .max(500, 'Maksimalt 500 ansatte kan importeres om gangen'),
  
  overskrivEksisterende: z.boolean().default(false),
  
  genererPassord: z.boolean().default(true),
  
  sendVelkomstEpost: z.boolean().default(true)
});

// ============================================================================
// VALIDATION MIDDLEWARE FOR ANSATT ROUTES
// ============================================================================

import { validateRequest } from '../middleware/requestValidation';

// POST /api/auth/logg-inn
export const validateLoggInn = validateRequest({
  body: loggInnSchema
});

// POST /api/ansatte
export const validateOpprettAnsatt = validateRequest({
  body: opprettAnsattSchema
});

// PUT /api/ansatte/:id
export const validateOppdaterAnsatt = validateRequest({
  params: z.object({ id: idSchema }),
  body: oppdaterAnsattSchema
});

// GET /api/ansatte/:id
export const validateHentAnsatt = validateRequest({
  params: z.object({ id: idSchema })
});

// DELETE /api/ansatte/:id
export const validateSlettAnsatt = validateRequest({
  params: z.object({ id: idSchema })
});

// GET /api/ansatte (søk)
export const validateSokAnsatte = validateRequest({
  query: sokAnsatteSchema
});

// POST /api/ansatte/endre-passord
export const validateEndrePassord = validateRequest({
  body: endrePassordSchema
});

// POST /api/ansatte/tilbakestill-passord
export const validateTilbakestillPassord = validateRequest({
  body: tilbakestillPassordSchema
});

// GET /api/ansatte/statistikk
export const validateAnsattStatistikk = validateRequest({
  query: ansattStatistikkSchema
});

// PUT /api/ansatte/bulk-oppdater
export const validateBulkOppdaterAnsatte = validateRequest({
  body: bulkOppdaterAnsatteSchema
});

// POST /api/ansatte/import
export const validateImportAnsatte = validateRequest({
  body: importAnsatteSchema
});

// Manglende schemas som brukes i routes
export const ansattRegistrerSchema = opprettAnsattSchema;
export const oppdaterAnsattProfilSchema = oppdaterAnsattSchema;
export const adminOppdaterAnsattSchema = oppdaterAnsattSchema;
export const slettAnsattSchema = z.object({ id: idSchema });
export const hentAnsatteBedriftSchema = z.object({ id: idSchema });
export const adminOppdaterTilgangerSchema = z.object({
  tilganger: z.array(z.string())
});
export const impersonerBrukerSchema = z.object({ id: idSchema }); 