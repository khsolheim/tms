import { z } from 'zod';

// Schema for test e-post sending
export const testEmailSchema = z.object({
  body: z.object({
    to: z.string()
      .email('Ugyldig e-postadresse')
      .min(1, 'E-postadresse er pakrevd'),
    subject: z.string()
      .max(200, 'Emne kan ikke være lengre enn 200 tegn')
      .optional()
      .default('Test e-post fra TMS'),
    message: z.string()
      .max(5000, 'Melding kan ikke være lengre enn 5000 tegn')
      .optional()
      .default('Dette er en test e-post fra TMS systemet.')
  })
});

// Schema for sending kontrakt på e-post
export const sendKontraktEmailSchema = z.object({
  params: z.object({
    kontraktId: z.string()
      .regex(/^\d+$/, "Kontrakt ID må være et tall")
      .transform(Number)
      .refine(id => id > 0, "Kontrakt ID må være større enn 0")
  }),
  body: z.object({
    sendPdf: z.boolean()
      .optional()
      .default(true),
    mottakerEpost: z.string()
      .email('Ugyldig e-postadresse')
      .optional(), // Kan overstyre kontrakt e-post
    tilleggsmelding: z.string()
      .max(2000, 'Tilleggsmelding kan ikke være lengre enn 2000 tegn')
      .optional()
  })
});

// Schema for sending statusvarsel
export const sendStatusVarselSchema = z.object({
  body: z.object({
    kontraktId: z.number({
      required_error: 'Kontrakt ID er pakrevd',
      invalid_type_error: 'Kontrakt ID må være et tall'
    })
    .int('Kontrakt ID må være et heltall')
    .positive('Kontrakt ID må være større enn 0'),
    nyStatus: z.enum(['AKTIV', 'PAUSE', 'FULLFORT', 'KANSELLERT'], {
      required_error: 'Status er pakrevd',
      invalid_type_error: 'Ugyldig status'
    }),
    mottakerEpost: z.string()
      .email('Ugyldig e-postadresse')
      .optional(), // Kan overstyre kontrakt e-post
    tilleggsmelding: z.string()
      .max(1000, 'Tilleggsmelding kan ikke være lengre enn 1000 tegn')
      .optional()
  })
});

// Schema for henting av e-postinnstillinger (kun query validation)
export const getEmailSettingsSchema = z.object({
  query: z.object({}).optional() // Ingen query params for denne
});

// Schema for oppdatering av e-postinnstillinger
export const updateEmailSettingsSchema = z.object({
  body: z.object({
    sendKvitteringTilElev: z.boolean()
      .optional(),
    sendKopiTilBedrift: z.boolean()
      .optional(),
    standardAvsenderEpost: z.string()
      .email('Ugyldig e-postadresse for avsender')
      .optional(),
    standardAvsenderNavn: z.string()
      .min(1, 'Avsender navn må være minst 1 tegn')
      .max(100, 'Avsender navn kan ikke være lengre enn 100 tegn')
      .optional(),
    varsleNyKontrakt: z.boolean()
      .optional(),
    varsleStatusendring: z.boolean()
      .optional(),
    varsleForfall: z.boolean()
      .optional(),
    dagerForVarslingForfall: z.number()
      .int('Dager må være et heltall')
      .min(1, 'Minimum 1 dag for varsling')
      .max(365, 'Maksimalt 365 dager for varsling')
      .optional()
  })
});

// Schema for massemail sending
export const sendMasseEmailSchema = z.object({
  body: z.object({
    mottakere: z.array(
      z.string().email('Ugyldig e-postadresse i mottakerliste')
    )
    .min(1, 'Minst én mottaker er pakrevd')
    .max(100, 'Maksimalt 100 mottakere per sending'),
    emne: z.string()
      .min(1, 'Emne er pakrevd')
      .max(200, 'Emne kan ikke være lengre enn 200 tegn'),
    melding: z.string()
      .min(1, 'Melding er pakrevd')
      .max(10000, 'Melding kan ikke være lengre enn 10000 tegn'),
    sendPdfKontrakter: z.boolean()
      .optional()
      .default(false),
    kontraktIder: z.array(z.number().positive())
      .optional(), // Kun relevant hvis sendPdfKontrakter er true
    planlagtSending: z.string()
      .datetime('Ugyldig dato format for planlagt sending')
      .optional() // For å sende på et senere tidspunkt
  })
  .refine(data => {
    // Hvis PDF kontrakter skal sendes, må kontraktIder være spesifisert
    if (data.sendPdfKontrakter && (!data.kontraktIder || data.kontraktIder.length === 0)) {
      return false;
    }
    return true;
  }, {
    message: 'Kontrakt IDer må spesifiseres når PDF kontrakter skal sendes'
  })
});

// Schema for e-post logg/historikk
export const getEmailLogSchema = z.object({
  query: z.object({
    side: z.string()
      .regex(/^\d+$/, "Side må være et tall")
      .transform(Number)
      .refine(num => num > 0, "Side må være større enn 0")
      .optional()
      .default("1"),
    limit: z.string()
      .regex(/^\d+$/, "Limit må være et tall")
      .transform(Number)
      .refine(num => num > 0 && num <= 100, "Limit må være mellom 1 og 100")
      .optional()
      .default("50"),
    fra: z.string()
      .datetime('Ugyldig fra-dato format')
      .optional(),
    til: z.string()
      .datetime('Ugyldig til-dato format')
      .optional(),
    status: z.enum(['SENDT', 'FEILET', 'VENTER'], {
      invalid_type_error: 'Ugyldig status filter'
    }).optional(),
    mottaker: z.string()
      .email('Ugyldig e-postadresse for mottaker filter')
      .optional()
  })
});

// Type exports
export type TestEmail = z.infer<typeof testEmailSchema>;
export type SendKontraktEmail = z.infer<typeof sendKontraktEmailSchema>;
export type SendStatusVarsel = z.infer<typeof sendStatusVarselSchema>;
export type GetEmailSettings = z.infer<typeof getEmailSettingsSchema>;
export type UpdateEmailSettings = z.infer<typeof updateEmailSettingsSchema>;
export type SendMasseEmail = z.infer<typeof sendMasseEmailSchema>;
export type GetEmailLog = z.infer<typeof getEmailLogSchema>; 