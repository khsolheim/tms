# =============================================================================
# TMS Server - Production Dockerfile
# =============================================================================
# Multi-stage build for optimized production image

# =============================================================================
# Stage 1: Build dependencies and compile TypeScript
# =============================================================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl

# Copy package files
COPY package*.json ./
COPY prisma ./prisma

# Install all dependencies (including devDependencies for build)
RUN npm ci --silent

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build TypeScript to JavaScript
RUN npm run build

# Remove devDependencies to reduce size
RUN npm prune --production

# =============================================================================
# Stage 2: Production runtime
# =============================================================================
FROM node:18-alpine AS production

# Set environment variables
ENV NODE_ENV=production
ENV TZ=Europe/Oslo

# Install system dependencies for production
RUN apk add --no-cache \
    curl \
    dumb-init \
    postgresql-client \
    redis \
    && rm -rf /var/cache/apk/*

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Create required directories
RUN mkdir -p /app/uploads /app/logs /app/backups && \
    chown -R nextjs:nodejs /app

# Copy production dependencies from builder
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist

# Copy Prisma files
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# Copy package.json for scripts
COPY --chown=nextjs:nodejs package*.json ./

# Copy startup scripts
COPY --chown=nextjs:nodejs scripts/startup.sh ./scripts/startup.sh
RUN chmod +x ./scripts/startup.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT:-4000}/health || exit 1

# Expose port
EXPOSE 4000

# Switch to non-root user
USER nextjs

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application with startup script
CMD ["./scripts/startup.sh"] 