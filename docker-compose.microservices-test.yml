version: '3.8'

services:
  # Infrastructure
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tms_db
      POSTGRES_USER: tms_user
      POSTGRES_PASSWORD: tms_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tms_user -d tms_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Core Backend
  backend-test:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "4001:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-test:5432/tms_db
      - REDIS_URL=redis://redis-test:6379
      - JWT_SECRET=test-secret
      - PORT=4000
    volumes:
      - ./server/src:/app/src
      - ./server/prisma:/app/prisma
      - /app/node_modules
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway-test:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8100:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - AUTH_SERVICE_URL=http://auth-service-test:8001
      - USER_SERVICE_URL=http://user-service-test:8002
    depends_on:
      - auth-service-test
      - user-service-test
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Microservices
  auth-service-test:
    build:
      context: ./microservices/services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8101:8001"
    environment:
      - NODE_ENV=development
      - PORT=8001
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-test:5432/tms_db
      - JWT_SECRET=test-secret
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service-test:
    build:
      context: ./microservices/services/user-service
      dockerfile: Dockerfile
    ports:
      - "8102:8002"
    environment:
      - NODE_ENV=development
      - PORT=8002
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-test:5432/tms_db
      - AUTH_SERVICE_URL=http://auth-service-test:8001
    depends_on:
      postgres-test:
        condition: service_healthy
      auth-service-test:
        condition: service_healthy
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test some advanced services
  notification-service-test:
    build:
      context: ./microservices/services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8108:8008"
    environment:
      - NODE_ENV=development
      - PORT=8008
      - REDIS_URL=redis://redis-test:6379
    depends_on:
      redis-test:
        condition: service_healthy
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  quantum-consciousness-service-test:
    build:
      context: ./microservices/services/quantum-consciousness-service
      dockerfile: Dockerfile
    ports:
      - "8121:8021"
    environment:
      - NODE_ENV=development
      - PORT=8021
    networks:
      - tms-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8021/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  tms-test-network:
    driver: bridge

volumes:
  postgres_test_data:
  redis_test_data: 