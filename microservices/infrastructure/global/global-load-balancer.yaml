apiVersion: v1
kind: ConfigMap
metadata:
  name: global-lb-config
  namespace: tms-system
data:
  nginx.conf: |
    upstream tms_backend {
        least_conn;
        server tms-cluster-eu-west-1.example.com:443 weight=3 max_fails=3 fail_timeout=30s;
        server tms-cluster-us-east-1.example.com:443 weight=2 max_fails=3 fail_timeout=30s;
        server tms-cluster-ap-southeast-1.example.com:443 weight=1 max_fails=3 fail_timeout=30s;
    }
    
    upstream tms_api_backend {
        least_conn;
        server api-eu-west-1.tms.example.com:443 weight=3 max_fails=3 fail_timeout=30s;
        server api-us-east-1.tms.example.com:443 weight=2 max_fails=3 fail_timeout=30s;
        server api-ap-southeast-1.tms.example.com:443 weight=1 max_fails=3 fail_timeout=30s;
    }
    
    upstream tms_graphql_backend {
        least_conn;
        server graphql-eu-west-1.tms.example.com:443 weight=3 max_fails=3 fail_timeout=30s;
        server graphql-us-east-1.tms.example.com:443 weight=2 max_fails=3 fail_timeout=30s;
        server graphql-ap-southeast-1.tms.example.com:443 weight=1 max_fails=3 fail_timeout=30s;
    }
    
    # Geo-based routing map
    geo $closest_region {
        default us-east-1;
        
        # Europe
        ~^(2|31|37|46|62|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95)\..*$ eu-west-1;
        
        # Asia Pacific
        ~^(1|14|27|36|39|42|43|49|58|59|60|61|101|103|106|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|133|150|153|163|171|175|180|182|183|202|203|210|211|218|219|220|221|222)\..*$ ap-southeast-1;
        
        # North America (default)
    }
    
    server {
        listen 80;
        server_name tms.example.com *.tms.example.com;
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name tms.example.com;
        
        ssl_certificate /etc/ssl/certs/tms.crt;
        ssl_certificate_key /etc/ssl/private/tms.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Geo-based routing
        set $backend_region $closest_region;
        
        location / {
            # Health check for load balancer
            if ($request_uri = "/health") {
                return 200 "OK";
                add_header Content-Type text/plain;
            }
            
            # Route to closest region
            if ($backend_region = "eu-west-1") {
                proxy_pass https://tms-cluster-eu-west-1.example.com;
            }
            if ($backend_region = "ap-southeast-1") {
                proxy_pass https://tms-cluster-ap-southeast-1.example.com;
            }
            
            # Default to US East
            proxy_pass https://tms-cluster-us-east-1.example.com;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Region $backend_region;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Enable compression
            gzip on;
            gzip_vary on;
            gzip_min_length 1024;
            gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        }
    }
    
    server {
        listen 443 ssl http2;
        server_name api.tms.example.com;
        
        ssl_certificate /etc/ssl/certs/tms.crt;
        ssl_certificate_key /etc/ssl/private/tms.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        
        # API-specific rate limiting
        limit_req zone=api burst=20 nodelay;
        
        location /auth/login {
            limit_req zone=login burst=5 nodelay;
            
            # Route to closest API region
            if ($backend_region = "eu-west-1") {
                proxy_pass https://api-eu-west-1.tms.example.com;
            }
            if ($backend_region = "ap-southeast-1") {
                proxy_pass https://api-ap-southeast-1.tms.example.com;
            }
            proxy_pass https://api-us-east-1.tms.example.com;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Region $backend_region;
        }
        
        location / {
            # Route to closest API region
            if ($backend_region = "eu-west-1") {
                proxy_pass https://api-eu-west-1.tms.example.com;
            }
            if ($backend_region = "ap-southeast-1") {
                proxy_pass https://api-ap-southeast-1.tms.example.com;
            }
            proxy_pass https://api-us-east-1.tms.example.com;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Region $backend_region;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
    
    server {
        listen 443 ssl http2;
        server_name graphql.tms.example.com;
        
        ssl_certificate /etc/ssl/certs/tms.crt;
        ssl_certificate_key /etc/ssl/private/tms.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        
        # GraphQL-specific rate limiting
        limit_req zone=api burst=50 nodelay;
        
        location / {
            # Route to closest GraphQL region
            if ($backend_region = "eu-west-1") {
                proxy_pass https://graphql-eu-west-1.tms.example.com;
            }
            if ($backend_region = "ap-southeast-1") {
                proxy_pass https://graphql-ap-southeast-1.tms.example.com;
            }
            proxy_pass https://graphql-us-east-1.tms.example.com;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Region $backend_region;
            
            # WebSocket support for GraphQL subscriptions
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-load-balancer
  namespace: tms-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: global-load-balancer
  template:
    metadata:
      labels:
        app: global-load-balancer
    spec:
      containers:
      - name: nginx
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-keys
          mountPath: /etc/ssl/private
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: global-lb-config
      - name: ssl-certs
        secret:
          secretName: tms-tls-secret
          items:
          - key: tls.crt
            path: tms.crt
      - name: ssl-keys
        secret:
          secretName: tms-tls-secret
          items:
          - key: tls.key
            path: tms.key

---
apiVersion: v1
kind: Service
metadata:
  name: global-load-balancer
  namespace: tms-system
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: global-load-balancer

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: global-lb-network-policy
  namespace: tms-system
spec:
  podSelector:
    matchLabels:
      app: global-load-balancer
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53 