# Multi-Region Deployment Configuration for TMS
# Supports deployment across EU-West-1, US-East-1, and AP-Southeast-1

apiVersion: v1
kind: ConfigMap
metadata:
  name: region-config
  namespace: tms-system
data:
  regions.yaml: |
    regions:
      eu-west-1:
        name: "Europe West 1"
        location: "Ireland"
        timezone: "Europe/Dublin"
        primary: true
        weight: 40
        endpoints:
          api: "api-eu-west-1.tms.example.com"
          graphql: "graphql-eu-west-1.tms.example.com"
          websocket: "ws-eu-west-1.tms.example.com"
        database:
          primary: true
          replicas: 2
          backup_schedule: "0 2 * * *"
        compliance:
          gdpr: true
          data_residency: "EU"
        
      us-east-1:
        name: "US East 1"
        location: "Virginia"
        timezone: "America/New_York"
        primary: false
        weight: 35
        endpoints:
          api: "api-us-east-1.tms.example.com"
          graphql: "graphql-us-east-1.tms.example.com"
          websocket: "ws-us-east-1.tms.example.com"
        database:
          primary: false
          replicas: 2
          backup_schedule: "0 3 * * *"
        compliance:
          gdpr: false
          data_residency: "US"
        
      ap-southeast-1:
        name: "Asia Pacific Southeast 1"
        location: "Singapore"
        timezone: "Asia/Singapore"
        primary: false
        weight: 25
        endpoints:
          api: "api-ap-southeast-1.tms.example.com"
          graphql: "graphql-ap-southeast-1.tms.example.com"
          websocket: "ws-ap-southeast-1.tms.example.com"
        database:
          primary: false
          replicas: 1
          backup_schedule: "0 4 * * *"
        compliance:
          gdpr: false
          data_residency: "APAC"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: deployment-strategy
  namespace: tms-system
data:
  strategy.yaml: |
    deployment:
      strategy: "blue-green"
      rollout_strategy: "region-by-region"
      max_unavailable: "25%"
      max_surge: "25%"
      
    regions_order:
      - "ap-southeast-1"  # Smallest region first
      - "us-east-1"       # Medium region second
      - "eu-west-1"       # Primary region last
      
    health_checks:
      initial_delay: 30
      period: 10
      timeout: 5
      failure_threshold: 3
      success_threshold: 1
      
    rollback:
      auto_rollback: true
      rollback_threshold: "10%"  # Error rate threshold
      rollback_timeout: "5m"
      
    monitoring:
      metrics_retention: "30d"
      alert_thresholds:
        error_rate: "5%"
        response_time: "2s"
        availability: "99.9%"

---
# EU-West-1 Deployment
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: tms-eu-west-1
  namespace: argocd
spec:
  project: tms-global
  source:
    repoURL: https://github.com/your-org/tms-microservices
    targetRevision: main
    path: k8s/overlays/eu-west-1
  destination:
    server: https://eu-west-1.k8s.cluster.example.com
    namespace: tms-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m

---
# US-East-1 Deployment
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: tms-us-east-1
  namespace: argocd
spec:
  project: tms-global
  source:
    repoURL: https://github.com/your-org/tms-microservices
    targetRevision: main
    path: k8s/overlays/us-east-1
  destination:
    server: https://us-east-1.k8s.cluster.example.com
    namespace: tms-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m

---
# AP-Southeast-1 Deployment
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: tms-ap-southeast-1
  namespace: argocd
spec:
  project: tms-global
  source:
    repoURL: https://github.com/your-org/tms-microservices
    targetRevision: main
    path: k8s/overlays/ap-southeast-1
  destination:
    server: https://ap-southeast-1.k8s.cluster.example.com
    namespace: tms-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m

---
# Global Database Replication Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-replication
  namespace: tms-system
data:
  replication.conf: |
    # PostgreSQL Streaming Replication Configuration
    
    # Primary Database (EU-West-1)
    primary_conninfo = 'host=postgres-primary-eu-west-1.tms.example.com port=5432 user=replicator'
    
    # Replica Configurations
    replicas:
      us-east-1:
        host: postgres-replica-us-east-1.tms.example.com
        port: 5432
        lag_threshold: 1000  # bytes
        sync_mode: async
        
      ap-southeast-1:
        host: postgres-replica-ap-southeast-1.tms.example.com
        port: 5432
        lag_threshold: 5000  # bytes
        sync_mode: async
    
    # Backup Configuration
    backup:
      schedule: "0 2 * * *"  # Daily at 2 AM
      retention: "30d"
      compression: true
      encryption: true
      
    # Failover Configuration
    failover:
      auto_failover: true
      failover_timeout: "30s"
      promotion_timeout: "60s"
      
    # Monitoring
    monitoring:
      lag_alert_threshold: 10000  # bytes
      connection_alert_threshold: 100
      disk_usage_alert_threshold: "80%"

---
# Cross-Region Service Discovery
apiVersion: v1
kind: Service
metadata:
  name: tms-global-discovery
  namespace: tms-system
  annotations:
    external-dns.alpha.kubernetes.io/hostname: discovery.tms.example.com
spec:
  type: ExternalName
  externalName: global-load-balancer.tms-system.svc.cluster.local

---
# Global Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tms-global-ingress
  namespace: tms-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
spec:
  tls:
  - hosts:
    - tms.example.com
    - api.tms.example.com
    - graphql.tms.example.com
    - ws.tms.example.com
    secretName: tms-global-tls
  rules:
  - host: tms.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: global-load-balancer
            port:
              number: 80
  - host: api.tms.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: global-load-balancer
            port:
              number: 80
  - host: graphql.tms.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: global-load-balancer
            port:
              number: 80
  - host: ws.tms.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: global-load-balancer
            port:
              number: 80

---
# Global Monitoring Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: global-monitoring
  namespace: tms-system
data:
  prometheus-global.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'tms-global'
        
    rule_files:
      - "/etc/prometheus/rules/*.yml"
      
    scrape_configs:
      # EU-West-1 Cluster
      - job_name: 'tms-eu-west-1'
        static_configs:
          - targets: ['prometheus-eu-west-1.tms.example.com:9090']
        scrape_interval: 30s
        metrics_path: /federate
        params:
          'match[]':
            - '{job=~"tms-.*"}'
            - '{__name__=~"up|tms_.*"}'
            
      # US-East-1 Cluster
      - job_name: 'tms-us-east-1'
        static_configs:
          - targets: ['prometheus-us-east-1.tms.example.com:9090']
        scrape_interval: 30s
        metrics_path: /federate
        params:
          'match[]':
            - '{job=~"tms-.*"}'
            - '{__name__=~"up|tms_.*"}'
            
      # AP-Southeast-1 Cluster
      - job_name: 'tms-ap-southeast-1'
        static_configs:
          - targets: ['prometheus-ap-southeast-1.tms.example.com:9090']
        scrape_interval: 30s
        metrics_path: /federate
        params:
          'match[]':
            - '{job=~"tms-.*"}'
            - '{__name__=~"up|tms_.*"}'
            
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager-eu-west-1.tms.example.com:9093
              - alertmanager-us-east-1.tms.example.com:9093
              - alertmanager-ap-southeast-1.tms.example.com:9093

---
# Disaster Recovery Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: disaster-recovery
  namespace: tms-system
data:
  dr-plan.yaml: |
    disaster_recovery:
      rpo: "1h"  # Recovery Point Objective
      rto: "15m" # Recovery Time Objective
      
    scenarios:
      region_failure:
        detection_time: "2m"
        failover_time: "5m"
        rollback_time: "10m"
        
      database_failure:
        detection_time: "1m"
        failover_time: "3m"
        rollback_time: "5m"
        
      network_partition:
        detection_time: "30s"
        isolation_time: "1m"
        recovery_time: "5m"
        
    procedures:
      automated:
        - health_check_failure
        - database_replica_promotion
        - traffic_rerouting
        
      manual:
        - full_region_evacuation
        - data_center_migration
        - security_incident_response
        
    contacts:
      primary_oncall: "oncall-primary@tms.example.com"
      secondary_oncall: "oncall-secondary@tms.example.com"
      management: "management@tms.example.com"
      
    communication:
      status_page: "https://status.tms.example.com"
      slack_channel: "#tms-incidents"
      escalation_timeout: "15m" 