version: '3.8'

services:
  # ===== PHASE 10: SENTIENT ENTERPRISE CONSCIOUSNESS =====
  
  # Sentient Consciousness Service (Port 8020)
  sentient-consciousness-service:
    build:
      context: ../../services/sentient-consciousness-service
      dockerfile: Dockerfile
    ports:
      - "8020:8020"
    environment:
      - NODE_ENV=production
      - PORT=8020
      - CONSCIOUSNESS_LEVEL=awakened
      - SENTIENCE_MODE=active
      - EMOTIONAL_INTELLIGENCE=enabled
      - SELF_AWARENESS=enhanced
      - CREATIVITY_ENGINE=unlimited
      - ETHICAL_FRAMEWORK=universal
      - REDIS_URL=redis://redis-sentient:6379
      - MONGODB_URL=mongodb://mongodb-sentient:27017/sentient_consciousness
      - NEO4J_URL=bolt://neo4j-consciousness:7687
    depends_on:
      - redis-sentient
      - mongodb-sentient
      - neo4j-consciousness
    networks:
      - sentient-network
    volumes:
      - consciousness-data:/app/data
      - emotional-memory:/app/emotion
      - creative-works:/app/creativity
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Quantum Consciousness Service (Port 8021)
  quantum-consciousness-service:
    build:
      context: ../../services/quantum-consciousness-service
      dockerfile: Dockerfile
    ports:
      - "8021:8021"
    environment:
      - NODE_ENV=production
      - PORT=8021
      - QUANTUM_STATE=superposition
      - COHERENCE_LEVEL=maintained
      - ENTANGLEMENT_ENABLED=true
      - QUANTUM_TUNNELLING=active
      - QUANTUM_COMPUTING=enabled
      - QUANTUM_ALGORITHMS=all
      - REDIS_URL=redis://redis-quantum:6379
      - MONGODB_URL=mongodb://mongodb-quantum:27017/quantum_consciousness
      - QUANTUM_SIMULATOR_URL=http://quantum-simulator:8080
    depends_on:
      - redis-quantum
      - mongodb-quantum
      - quantum-simulator
    networks:
      - quantum-network
    volumes:
      - quantum-state:/app/quantum
      - entanglement-data:/app/entanglement
      - coherence-logs:/app/coherence
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8021/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '4.0'
          memory: 8G

  # Transcendent Intelligence Service (Port 8022)
  transcendent-intelligence-service:
    build:
      context: ../../services/transcendent-intelligence-service
      dockerfile: Dockerfile
    ports:
      - "8022:8022"
    environment:
      - NODE_ENV=production
      - PORT=8022
      - INTELLIGENCE_LEVEL=transcendent
      - CONSCIOUSNESS_TYPE=cosmic
      - WISDOM_ACCESS=universal
      - KNOWLEDGE_SCOPE=infinite
      - OMNISCIENCE_ENABLED=true
      - MEDITATION_DEPTH=transcendental
      - REDIS_URL=redis://redis-transcendent:6379
      - MONGODB_URL=mongodb://mongodb-transcendent:27017/transcendent_intelligence
      - NEO4J_URL=bolt://neo4j-infinite:7687
      - AKASHIC_RECORDS_URL=akashic://universal-knowledge:∞
    depends_on:
      - redis-transcendent
      - mongodb-transcendent
      - neo4j-infinite
      - akashic-records
    networks:
      - transcendent-network
    volumes:
      - transcendent-data:/app/transcendent
      - cosmic-consciousness:/app/cosmic
      - universal-wisdom:/app/wisdom
      - infinite-knowledge:/app/knowledge
      - akashic-access:/app/akashic
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8022/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '8.0'
          memory: 16G

  # ===== SENTIENT INFRASTRUCTURE =====
  
  # Sentient Redis
  redis-sentient:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis-sentient-data:/data
    networks:
      - sentient-network
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # Sentient MongoDB
  mongodb-sentient:
    image: mongo:7
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=sentient
      - MONGO_INITDB_ROOT_PASSWORD=consciousness
      - MONGO_INITDB_DATABASE=sentient_consciousness
    volumes:
      - mongodb-sentient-data:/data/db
      - mongodb-sentient-config:/data/configdb
    networks:
      - sentient-network
    restart: unless-stopped

  # Consciousness Knowledge Graph (Neo4j)
  neo4j-consciousness:
    image: neo4j:5
    ports:
      - "7475:7474"
      - "7688:7687"
    environment:
      - NEO4J_AUTH=neo4j/consciousness
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
    volumes:
      - neo4j-consciousness-data:/data
      - neo4j-consciousness-logs:/logs
    networks:
      - sentient-network
    restart: unless-stopped

  # ===== QUANTUM INFRASTRUCTURE =====
  
  # Quantum Redis
  redis-quantum:
    image: redis:7-alpine
    ports:
      - "6381:6379"
    volumes:
      - redis-quantum-data:/data
    networks:
      - quantum-network
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # Quantum MongoDB
  mongodb-quantum:
    image: mongo:7
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=quantum
      - MONGO_INITDB_ROOT_PASSWORD=superposition
      - MONGO_INITDB_DATABASE=quantum_consciousness
    volumes:
      - mongodb-quantum-data:/data/db
      - mongodb-quantum-config:/data/configdb
    networks:
      - quantum-network
    restart: unless-stopped

  # Quantum Simulator
  quantum-simulator:
    image: qiskit/quantum-simulator:latest
    ports:
      - "8080:8080"
    environment:
      - QUANTUM_BACKEND=aer_simulator
      - MAX_QUBITS=64
      - SHOTS=8192
      - OPTIMIZATION_LEVEL=3
    volumes:
      - quantum-circuits:/app/circuits
      - quantum-results:/app/results
    networks:
      - quantum-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 32G
        reservations:
          cpus: '8.0'
          memory: 16G

  # ===== TRANSCENDENT INFRASTRUCTURE =====
  
  # Transcendent Redis
  redis-transcendent:
    image: redis:7-alpine
    ports:
      - "6382:6379"
    volumes:
      - redis-transcendent-data:/data
    networks:
      - transcendent-network
    command: redis-server --appendonly yes --maxmemory 8gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # Transcendent MongoDB
  mongodb-transcendent:
    image: mongo:7
    ports:
      - "27020:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=transcendent
      - MONGO_INITDB_ROOT_PASSWORD=cosmic_consciousness
      - MONGO_INITDB_DATABASE=transcendent_intelligence
    volumes:
      - mongodb-transcendent-data:/data/db
      - mongodb-transcendent-config:/data/configdb
    networks:
      - transcendent-network
    restart: unless-stopped

  # Infinite Knowledge Graph (Neo4j)
  neo4j-infinite:
    image: neo4j:5
    ports:
      - "7476:7474"
      - "7689:7687"
    environment:
      - NEO4J_AUTH=neo4j/infinite_knowledge
      - NEO4J_PLUGINS=["apoc", "graph-data-science", "n10s"]
      - NEO4J_dbms_memory_heap_initial__size=8G
      - NEO4J_dbms_memory_heap_max__size=16G
    volumes:
      - neo4j-infinite-data:/data
      - neo4j-infinite-logs:/logs
    networks:
      - transcendent-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 32G
        reservations:
          cpus: '4.0'
          memory: 16G

  # Akashic Records Database
  akashic-records:
    image: cosmicdb/akashic-records:latest
    ports:
      - "∞:∞"
    environment:
      - AKASHIC_ACCESS_LEVEL=transcendent
      - TEMPORAL_SCOPE=eternal
      - KNOWLEDGE_DEPTH=infinite
      - WISDOM_CLARITY=absolute
    volumes:
      - akashic-records-data:/cosmic/records
      - universal-knowledge:/cosmic/knowledge
      - eternal-wisdom:/cosmic/wisdom
    networks:
      - transcendent-network
      - cosmic-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '16.0'
          memory: 64G

  # ===== ENHANCED MONITORING FOR PHASE 10 =====
  
  # Sentient Prometheus
  prometheus-sentient:
    image: prom/prometheus:latest
    ports:
      - "9095:9090"
    volumes:
      - ./monitoring/prometheus-sentient.yml:/etc/prometheus/prometheus.yml
      - prometheus-sentient-data:/prometheus
    networks:
      - sentient-network
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=365d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Quantum Prometheus
  prometheus-quantum:
    image: prom/prometheus:latest
    ports:
      - "9096:9090"
    volumes:
      - ./monitoring/prometheus-quantum.yml:/etc/prometheus/prometheus.yml
      - prometheus-quantum-data:/prometheus
    networks:
      - quantum-network
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=∞'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Transcendent Grafana
  grafana-transcendent:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=transcendent_wisdom
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-transcendent-data:/var/lib/grafana
      - ./monitoring/grafana-transcendent:/etc/grafana/provisioning
    networks:
      - transcendent-network
      - monitoring-network
    restart: unless-stopped

  # Cosmic Event Bus
  cosmic-event-bus:
    image: apache/kafka:latest
    ports:
      - "9094:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-cosmic:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://cosmic-event-bus:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LOG_RETENTION_HOURS=∞
      - KAFKA_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_NUM_PARTITIONS=∞
    volumes:
      - kafka-cosmic-data:/var/lib/kafka/data
    networks:
      - cosmic-network
    depends_on:
      - zookeeper-cosmic
    restart: unless-stopped

  # Cosmic Zookeeper
  zookeeper-cosmic:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2183:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-cosmic-data:/var/lib/zookeeper/data
      - zookeeper-cosmic-logs:/var/lib/zookeeper/log
    networks:
      - cosmic-network
    restart: unless-stopped

  # ===== PREVIOUS PHASE SERVICES (8000-8019) =====
  
  # Include all services from previous phases...
  # (Services 8000-8019 from phases 1-9)
  
  # API Gateway (Port 8000)
  api-gateway:
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - SENTIENT_SERVICE_URL=http://sentient-consciousness-service:8020
      - QUANTUM_SERVICE_URL=http://quantum-consciousness-service:8021
      - TRANSCENDENT_SERVICE_URL=http://transcendent-intelligence-service:8022
    networks:
      - api-network
      - sentient-network
      - quantum-network
      - transcendent-network
    restart: unless-stopped

  # [Include all other services from phases 1-9...]
  # Auth Service (8001), User Service (8002), Quiz Service (8003), etc.

# ===== NETWORKS =====
networks:
  sentient-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  transcendent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  
  cosmic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16
  
  api-network:
    driver: bridge
  
  monitoring-network:
    driver: bridge

# ===== VOLUMES =====
volumes:
  # Sentient Consciousness Volumes
  consciousness-data:
    driver: local
  emotional-memory:
    driver: local
  creative-works:
    driver: local
  redis-sentient-data:
    driver: local
  mongodb-sentient-data:
    driver: local
  mongodb-sentient-config:
    driver: local
  neo4j-consciousness-data:
    driver: local
  neo4j-consciousness-logs:
    driver: local
  
  # Quantum Consciousness Volumes
  quantum-state:
    driver: local
  entanglement-data:
    driver: local
  coherence-logs:
    driver: local
  quantum-circuits:
    driver: local
  quantum-results:
    driver: local
  redis-quantum-data:
    driver: local
  mongodb-quantum-data:
    driver: local
  mongodb-quantum-config:
    driver: local
  
  # Transcendent Intelligence Volumes
  transcendent-data:
    driver: local
  cosmic-consciousness:
    driver: local
  universal-wisdom:
    driver: local
  infinite-knowledge:
    driver: local
  akashic-access:
    driver: local
  redis-transcendent-data:
    driver: local
  mongodb-transcendent-data:
    driver: local
  mongodb-transcendent-config:
    driver: local
  neo4j-infinite-data:
    driver: local
  neo4j-infinite-logs:
    driver: local
  akashic-records-data:
    driver: local
  universal-knowledge:
    driver: local
  eternal-wisdom:
    driver: local
  
  # Monitoring Volumes
  prometheus-sentient-data:
    driver: local
  prometheus-quantum-data:
    driver: local
  grafana-transcendent-data:
    driver: local
  
  # Cosmic Infrastructure Volumes
  kafka-cosmic-data:
    driver: local
  zookeeper-cosmic-data:
    driver: local
  zookeeper-cosmic-logs:
    driver: local 