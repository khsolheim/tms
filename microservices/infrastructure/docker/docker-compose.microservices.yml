version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - AUTH_SERVICE_URL=http://auth-service:8001
      - USER_SERVICE_URL=http://user-service:8002
      - QUIZ_SERVICE_URL=http://quiz-service:8003
      - SIKKERHETSKONTROLL_SERVICE_URL=http://sikkerhetskontroll-service:8004
      - HR_SERVICE_URL=http://hr-service:8005
      - ECONOMY_SERVICE_URL=http://economy-service:8006
      - GRAPHQL_SERVICE_URL=http://graphql-service:8007
      - NOTIFICATION_SERVICE_URL=http://notification-service:8008
      - ML_SERVICE_URL=http://ml-service:8009
    depends_on:
      - auth-service
      - user-service
      - quiz-service
      - sikkerhetskontroll-service
      - hr-service
      - economy-service
      - graphql-service
      - notification-service
      - ml-service
    networks:
      - tms-network

  # Auth Service
  auth-service:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - PORT=8001
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres:5432/tms_db
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:8000
    depends_on:
      - postgres
    networks:
      - tms-network

  # User Service
  user-service:
    build:
      context: ../../services/user-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=development
      - PORT=8002
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres:5432/tms_db
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      - postgres
    networks:
      - tms-network

  # Quiz Service
  quiz-service:
    build:
      context: ../../services/quiz-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=development
      - PORT=8003
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres:5432/tms_db
    depends_on:
      - postgres
    networks:
      - tms-network

  # Sikkerhetskontroll Service
  sikkerhetskontroll-service:
    build:
      context: ../../services/sikkerhetskontroll-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=development
      - PORT=8004
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres:5432/tms_db
    depends_on:
      - postgres
    networks:
      - tms-network

  # HR Service
  hr-service:
    build:
      context: ../../services/hr-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - NODE_ENV=development
      - PORT=8005
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres:5432/tms_db
    depends_on:
      - postgres
    networks:
      - tms-network

  # Economy Service
  economy-service:
    build:
      context: ../../services/economy-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - NODE_ENV=development
      - PORT=8006
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres:5432/tms_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:8000
      - SERVICE_NAME=economy-service
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - postgres
      - redis
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GraphQL Service
  graphql-service:
    build:
      context: ../../services/graphql-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    environment:
      - NODE_ENV=development
      - PORT=8007
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:8000
      - SERVICE_NAME=graphql-service
    depends_on:
      - redis
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ../../services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    environment:
      - NODE_ENV=development
      - PORT=8008
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:8000
      - SERVICE_NAME=notification-service
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=your-email@gmail.com
      - EMAIL_PASS=your-app-password
      - TWILIO_ACCOUNT_SID=your-twilio-sid
      - TWILIO_AUTH_TOKEN=your-twilio-token
    depends_on:
      - redis
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Machine Learning Service
  ml-service:
    build:
      context: ../../services/ml-service
      dockerfile: Dockerfile
    ports:
      - "8009:8009"
    environment:
      - NODE_ENV=development
      - PORT=8009
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:8000
      - SERVICE_NAME=ml-service
      - TF_CPP_MIN_LOG_LEVEL=2
    depends_on:
      - redis
    networks:
      - tms-network
    volumes:
      - ml-models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tms_db
      - POSTGRES_USER=tms_user
      - POSTGRES_PASSWORD=tms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../../database/init:/docker-entrypoint-initdb.d
    networks:
      - tms-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tms-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - tms-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tms-network

  # PostgreSQL Exporter for monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://tms_user:tms_password@postgres:5432/tms_db?sslmode=disable
    depends_on:
      - postgres
    networks:
      - tms-network

  # Redis Exporter for monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - tms-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - tms-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - tms-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - tms-network

  # Observability Service (Port 8010)
  observability-service:
    build:
      context: ../../services/observability-service
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    environment:
      - NODE_ENV=development
      - PORT=8010
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - JAEGER_ENDPOINT=http://jaeger:14268
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - prometheus
      - jaeger
    networks:
      - tms-network
    volumes:
      - observability-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Istio Service Mesh Components
  istio-pilot:
    image: istio/pilot:1.18.0
    ports:
      - "15010:15010"
      - "15011:15011"
    environment:
      - PILOT_TRACE_SAMPLING=100
      - PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION=true
    networks:
      - tms-network
    volumes:
      - istio-config:/etc/istio

  istio-proxy:
    image: istio/proxyv2:1.18.0
    ports:
      - "15001:15001"
      - "15006:15006"
    environment:
      - PILOT_ADDRESS=istio-pilot:15010
    depends_on:
      - istio-pilot
    networks:
      - tms-network

  # Global Load Balancer
  global-load-balancer:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../global/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../global/ssl:/etc/ssl:ro
    depends_on:
      - api-gateway
      - graphql-service
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Enhanced Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - tms-network

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - tms-network

  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - tms-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - tms-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - tms-network

  # Zero Trust Security Components
  vault:
    image: vault:1.14.0
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
    networks:
      - tms-network

  consul:
    image: consul:1.16.0
    ports:
      - "8500:8500"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul-data:/consul/data
    networks:
      - tms-network

  # Message Queue for Global Scale
  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=tms
      - RABBITMQ_DEFAULT_PASS=tms123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - tms-network

  # Global Cache Layer
  redis-cluster:
    image: redis:7.0-alpine
    ports:
      - "6380:6379"
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-cluster-data:/data
    networks:
      - tms-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  sikkerhet-uploads:
  ml-models:
  observability-logs:
  istio-config:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  vault-data:
  consul-data:
  rabbitmq-data:
  redis-cluster-data:

networks:
  tms-network:
    driver: bridge 