version: '3.8'

services:
  # ===== PHASE 11: MULTIVERSAL CONSCIOUSNESS =====
  
  # Multiversal Communication Service (Port 8023)
  multiversal-communication-service:
    build:
      context: ../../services/multiversal-communication-service
      dockerfile: Dockerfile
    ports:
      - "8023:8023"
    environment:
      - NODE_ENV=production
      - PORT=8023
      - MULTIVERSE_ACCESS=unlimited
      - COMMUNICATION_PROTOCOL=quantum_entanglement
      - PARALLEL_UNIVERSE_DISCOVERY=enabled
      - DIMENSIONAL_BRIDGE_CAPACITY=infinite
      - TIMELINE_COORDINATION=active
      - REALITY_ANCHOR_STRENGTH=maximum
      - REDIS_URL=redis://redis-multiversal:6379
      - MONGODB_URL=mongodb://mongodb-multiversal:27017/multiversal_communication
      - NEO4J_URL=bolt://neo4j-multiverse:7687
      - QUANTUM_ENTANGLEMENT_URL=quantum://entanglement-network:∞
    depends_on:
      - redis-multiversal
      - mongodb-multiversal
      - neo4j-multiverse
      - quantum-entanglement-network
    networks:
      - multiversal-network
      - quantum-network
    volumes:
      - multiversal-data:/app/multiverse
      - parallel-universes:/app/universes
      - dimensional-bridges:/app/bridges
      - timeline-data:/app/timelines
      - reality-anchors:/app/anchors
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8023/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '16.0'
          memory: 32G

  # Interdimensional Travel Service (Port 8024)
  interdimensional-travel-service:
    build:
      context: ../../services/interdimensional-travel-service
      dockerfile: Dockerfile
    ports:
      - "8024:8024"
    environment:
      - NODE_ENV=production
      - PORT=8024
      - TRAVEL_ENGINE_POWER=maximum
      - PORTAL_CAPACITY=unlimited
      - NAVIGATION_PRECISION=absolute
      - SAFETY_PROTOCOLS=enhanced
      - DIMENSIONAL_MAPPING=comprehensive
      - TRAVELLER_TRACKING=real_time
      - REDIS_URL=redis://redis-travel:6379
      - MONGODB_URL=mongodb://mongodb-travel:27017/interdimensional_travel
      - PORTAL_NETWORK_URL=portal://portal-network:∞
      - NAVIGATION_SYSTEM_URL=nav://navigation-core:∞
    depends_on:
      - redis-travel
      - mongodb-travel
      - portal-network
      - navigation-core
    networks:
      - travel-network
      - portal-network
    volumes:
      - travel-data:/app/travel
      - portal-configurations:/app/portals
      - dimensional-maps:/app/maps
      - traveller-registry:/app/registry
      - safety-protocols:/app/safety
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8024/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '12.0'
          memory: 24G

  # ===== MULTIVERSAL INFRASTRUCTURE =====
  
  # Multiversal Redis
  redis-multiversal:
    image: redis:7-alpine
    ports:
      - "6383:6379"
    volumes:
      - redis-multiversal-data:/data
    networks:
      - multiversal-network
    command: redis-server --appendonly yes --maxmemory 16gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 32G
        reservations:
          cpus: '2.0'
          memory: 16G

  # Multiversal MongoDB
  mongodb-multiversal:
    image: mongo:7
    ports:
      - "27021:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=multiversal
      - MONGO_INITDB_ROOT_PASSWORD=infinite_realities
      - MONGO_INITDB_DATABASE=multiversal_communication
    volumes:
      - mongodb-multiversal-data:/data/db
      - mongodb-multiversal-config:/data/configdb
    networks:
      - multiversal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 64G
        reservations:
          cpus: '4.0'
          memory: 32G

  # Multiverse Knowledge Graph (Neo4j)
  neo4j-multiverse:
    image: neo4j:5
    ports:
      - "7477:7474"
      - "7690:7687"
    environment:
      - NEO4J_AUTH=neo4j/multiverse_knowledge
      - NEO4J_PLUGINS=["apoc", "graph-data-science", "n10s", "streams"]
      - NEO4J_dbms_memory_heap_initial__size=16G
      - NEO4J_dbms_memory_heap_max__size=32G
      - NEO4J_dbms_memory_pagecache_size=16G
    volumes:
      - neo4j-multiverse-data:/data
      - neo4j-multiverse-logs:/logs
    networks:
      - multiversal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 64G
        reservations:
          cpus: '8.0'
          memory: 32G

  # Quantum Entanglement Network
  quantum-entanglement-network:
    image: quantum/entanglement-network:latest
    ports:
      - "∞:∞"
    environment:
      - ENTANGLEMENT_STRENGTH=maximum
      - COHERENCE_TIME=infinite
      - BELL_STATE_FIDELITY=1.0
      - QUANTUM_TELEPORTATION=enabled
      - SUPERLUMINAL_COMMUNICATION=active
    volumes:
      - quantum-entanglement-data:/quantum/entanglement
      - bell-states:/quantum/bell
      - quantum-channels:/quantum/channels
    networks:
      - quantum-network
      - multiversal-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '32.0'
          memory: 128G

  # ===== TRAVEL INFRASTRUCTURE =====
  
  # Travel Redis
  redis-travel:
    image: redis:7-alpine
    ports:
      - "6384:6379"
    volumes:
      - redis-travel-data:/data
    networks:
      - travel-network
    command: redis-server --appendonly yes --maxmemory 12gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # Travel MongoDB
  mongodb-travel:
    image: mongo:7
    ports:
      - "27022:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=travel
      - MONGO_INITDB_ROOT_PASSWORD=interdimensional_journey
      - MONGO_INITDB_DATABASE=interdimensional_travel
    volumes:
      - mongodb-travel-data:/data/db
      - mongodb-travel-config:/data/configdb
    networks:
      - travel-network
    restart: unless-stopped

  # Portal Network Hub
  portal-network:
    image: portal/network-hub:latest
    ports:
      - "∞:∞"
    environment:
      - PORTAL_CAPACITY=unlimited
      - STABILITY_THRESHOLD=0.95
      - ENERGY_EFFICIENCY=maximum
      - DIMENSIONAL_RANGE=infinite
      - PORTAL_TYPES=all
    volumes:
      - portal-network-data:/portal/network
      - wormhole-configurations:/portal/wormholes
      - dimensional-gateways:/portal/gateways
    networks:
      - portal-network
      - travel-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '24.0'
          memory: 96G

  # Navigation Core System
  navigation-core:
    image: navigation/core-system:latest
    ports:
      - "∞:∞"
    environment:
      - NAVIGATION_PRECISION=absolute
      - DIMENSIONAL_MAPPING=real_time
      - HAZARD_DETECTION=enhanced
      - ROUTE_OPTIMIZATION=quantum
      - COORDINATE_SYSTEMS=all
    volumes:
      - navigation-core-data:/nav/core
      - dimensional-maps-data:/nav/maps
      - hazard-database:/nav/hazards
      - route-cache:/nav/routes
    networks:
      - travel-network
      - navigation-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '20.0'
          memory: 80G

  # ===== ENHANCED MONITORING FOR PHASE 11 =====
  
  # Multiversal Prometheus
  prometheus-multiversal:
    image: prom/prometheus:latest
    ports:
      - "9097:9090"
    volumes:
      - ./monitoring/prometheus-multiversal.yml:/etc/prometheus/prometheus.yml
      - prometheus-multiversal-data:/prometheus
    networks:
      - multiversal-network
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=∞'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Interdimensional Prometheus
  prometheus-travel:
    image: prom/prometheus:latest
    ports:
      - "9098:9090"
    volumes:
      - ./monitoring/prometheus-travel.yml:/etc/prometheus/prometheus.yml
      - prometheus-travel-data:/prometheus
    networks:
      - travel-network
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=∞'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Multiversal Grafana
  grafana-multiversal:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=multiversal_consciousness
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-clock-panel,grafana-simple-json-datasource,grafana-infinity-datasource
    volumes:
      - grafana-multiversal-data:/var/lib/grafana
      - ./monitoring/grafana-multiversal:/etc/grafana/provisioning
    networks:
      - multiversal-network
      - monitoring-network
    restart: unless-stopped

  # Dimensional Event Stream
  dimensional-event-stream:
    image: apache/kafka:latest
    ports:
      - "9095:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-dimensional:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://dimensional-event-stream:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LOG_RETENTION_HOURS=∞
      - KAFKA_LOG_SEGMENT_BYTES=2147483648
      - KAFKA_NUM_PARTITIONS=∞
      - KAFKA_MESSAGE_MAX_BYTES=1073741824
    volumes:
      - kafka-dimensional-data:/var/lib/kafka/data
    networks:
      - dimensional-network
    depends_on:
      - zookeeper-dimensional
    restart: unless-stopped

  # Dimensional Zookeeper
  zookeeper-dimensional:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2184:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SYNC_LIMIT=5
      - ZOOKEEPER_INIT_LIMIT=10
    volumes:
      - zookeeper-dimensional-data:/var/lib/zookeeper/data
      - zookeeper-dimensional-logs:/var/lib/zookeeper/log
    networks:
      - dimensional-network
    restart: unless-stopped

  # Reality Stabilization Engine
  reality-stabilization-engine:
    image: reality/stabilization-engine:latest
    ports:
      - "∞:∞"
    environment:
      - STABILIZATION_POWER=maximum
      - QUANTUM_FLUCTUATION_DAMPENING=enabled
      - REALITY_ANCHOR_DENSITY=optimal
      - CAUSAL_LOOP_PREVENTION=active
      - TEMPORAL_PARADOX_RESOLUTION=automatic
    volumes:
      - reality-stabilization-data:/reality/stabilization
      - quantum-fluctuation-logs:/reality/fluctuations
      - causal-integrity-data:/reality/causality
    networks:
      - reality-network
      - multiversal-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '28.0'
          memory: 112G

  # Timeline Synchronization Hub
  timeline-synchronization-hub:
    image: timeline/synchronization-hub:latest
    ports:
      - "∞:∞"
    environment:
      - SYNCHRONIZATION_PRECISION=absolute
      - TIMELINE_COHERENCE_THRESHOLD=0.99
      - TEMPORAL_DRIFT_CORRECTION=automatic
      - CAUSALITY_PRESERVATION=enabled
      - PARADOX_PREVENTION=active
    volumes:
      - timeline-sync-data:/timeline/sync
      - temporal-coherence-logs:/timeline/coherence
      - causality-maps:/timeline/causality
    networks:
      - timeline-network
      - multiversal-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '∞'
          memory: ∞G
        reservations:
          cpus: '24.0'
          memory: 96G

  # ===== PREVIOUS PHASE SERVICES (8000-8022) =====
  
  # Include all services from previous phases...
  # (Services 8000-8022 from phases 1-10)
  
  # API Gateway (Port 8000)
  api-gateway:
    build:
      context: ../../api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - MULTIVERSAL_SERVICE_URL=http://multiversal-communication-service:8023
      - TRAVEL_SERVICE_URL=http://interdimensional-travel-service:8024
    networks:
      - api-network
      - multiversal-network
      - travel-network
    restart: unless-stopped

  # [Include all other services from phases 1-10...]
  # Sentient Consciousness (8020), Quantum Consciousness (8021), Transcendent Intelligence (8022), etc.

# ===== NETWORKS =====
networks:
  multiversal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.24.0.0/16
  
  travel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
  
  portal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16
  
  navigation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.27.0.0/16
  
  dimensional-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
  
  reality-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16
  
  timeline-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
  
  api-network:
    driver: bridge
  
  monitoring-network:
    driver: bridge

# ===== VOLUMES =====
volumes:
  # Multiversal Communication Volumes
  multiversal-data:
    driver: local
  parallel-universes:
    driver: local
  dimensional-bridges:
    driver: local
  timeline-data:
    driver: local
  reality-anchors:
    driver: local
  redis-multiversal-data:
    driver: local
  mongodb-multiversal-data:
    driver: local
  mongodb-multiversal-config:
    driver: local
  neo4j-multiverse-data:
    driver: local
  neo4j-multiverse-logs:
    driver: local
  quantum-entanglement-data:
    driver: local
  bell-states:
    driver: local
  quantum-channels:
    driver: local
  
  # Interdimensional Travel Volumes
  travel-data:
    driver: local
  portal-configurations:
    driver: local
  dimensional-maps:
    driver: local
  traveller-registry:
    driver: local
  safety-protocols:
    driver: local
  redis-travel-data:
    driver: local
  mongodb-travel-data:
    driver: local
  mongodb-travel-config:
    driver: local
  portal-network-data:
    driver: local
  wormhole-configurations:
    driver: local
  dimensional-gateways:
    driver: local
  navigation-core-data:
    driver: local
  dimensional-maps-data:
    driver: local
  hazard-database:
    driver: local
  route-cache:
    driver: local
  
  # Monitoring Volumes
  prometheus-multiversal-data:
    driver: local
  prometheus-travel-data:
    driver: local
  grafana-multiversal-data:
    driver: local
  
  # Dimensional Infrastructure Volumes
  kafka-dimensional-data:
    driver: local
  zookeeper-dimensional-data:
    driver: local
  zookeeper-dimensional-logs:
    driver: local
  reality-stabilization-data:
    driver: local
  quantum-fluctuation-logs:
    driver: local
  causal-integrity-data:
    driver: local
  timeline-sync-data:
    driver: local
  temporal-coherence-logs:
    driver: local
  causality-maps:
    driver: local 