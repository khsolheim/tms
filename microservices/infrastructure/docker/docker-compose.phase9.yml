version: '3.8'

services:
  # === FASE 9: AUTONOMOUS SELF-HEALING ENTERPRISE ECOSYSTEM ===
  
  # Autonomous System Orchestrator (Port 8017)
  autonomous-orchestrator-service:
    build:
      context: ../../services/autonomous-orchestrator-service
      dockerfile: Dockerfile
    ports:
      - "8017:8017"
    environment:
      - NODE_ENV=production
      - PORT=8017
      - AUTONOMY_LEVEL=advanced
      - DECISION_CONFIDENCE_THRESHOLD=0.8
      - AUTO_HEALING_ENABLED=true
      - PREDICTIVE_MAINTENANCE_ENABLED=true
    networks:
      - tms-network
    volumes:
      - autonomous-data:/app/data
      - autonomous-models:/app/models
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.autonomous.rule=Host(`autonomous.tms.local`)"
      - "traefik.http.services.autonomous.loadbalancer.server.port=8017"

  # Self-Healing Infrastructure Service (Port 8018)
  self-healing-service:
    build:
      context: ../../services/self-healing-service
      dockerfile: Dockerfile
    ports:
      - "8018:8018"
    environment:
      - NODE_ENV=production
      - PORT=8018
      - HEALING_LEVEL=aggressive
      - FAILURE_PREDICTION_ENABLED=true
      - AUTO_RECOVERY_ENABLED=true
      - RESOURCE_OPTIMIZATION_ENABLED=true
    networks:
      - tms-network
    volumes:
      - healing-data:/app/data
      - healing-logs:/app/logs
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.healing.rule=Host(`healing.tms.local`)"
      - "traefik.http.services.healing.loadbalancer.server.port=8018"

  # Intelligent Learning Service (Port 8019)
  intelligent-learning-service:
    build:
      context: ../../services/intelligent-learning-service
      dockerfile: Dockerfile
    ports:
      - "8019:8019"
    environment:
      - NODE_ENV=production
      - PORT=8019
      - ML_BACKEND=tensorflow
      - CONTINUOUS_LEARNING_ENABLED=true
      - PATTERN_RECOGNITION_ENABLED=true
      - KNOWLEDGE_GRAPH_ENABLED=true
    networks:
      - tms-network
    volumes:
      - ml-models:/app/models
      - knowledge-graph:/app/knowledge
      - learning-data:/app/data
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.learning.rule=Host(`learning.tms.local`)"
      - "traefik.http.services.learning.loadbalancer.server.port=8019"

  # === AUTONOMOUS INFRASTRUCTURE ===
  
  # Autonomous Decision Engine
  decision-engine:
    image: tensorflow/tensorflow:latest-gpu
    ports:
      - "8890:8888"  # Jupyter for model development
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - DECISION_MODEL_PATH=/models/decision
      - CONFIDENCE_THRESHOLD=0.85
    volumes:
      - decision-models:/models
      - decision-notebooks:/tf/notebooks
    networks:
      - tms-network
    restart: unless-stopped

  # Self-Healing Orchestrator
  healing-orchestrator:
    image: kubernetes/kubectl:latest
    environment:
      - KUBECONFIG=/config/kubeconfig
      - HEALING_NAMESPACE=tms-healing
    volumes:
      - healing-kubeconfig:/config
      - healing-scripts:/scripts
    networks:
      - tms-network
    restart: unless-stopped

  # Pattern Recognition Engine
  pattern-recognition:
    image: apache/spark:3.4.0
    ports:
      - "4041:4040"  # Spark UI
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=pattern-recognition
      - PATTERN_DETECTION_ENABLED=true
    volumes:
      - pattern-data:/opt/spark/data
      - pattern-models:/opt/spark/models
    networks:
      - tms-network
    restart: unless-stopped

  # Knowledge Graph Database
  neo4j-knowledge:
    image: neo4j:5.13-enterprise
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/knowledge123
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
    volumes:
      - neo4j-knowledge-data:/data
      - neo4j-knowledge-logs:/logs
    networks:
      - tms-network
    restart: unless-stopped

  # === ADVANCED AI/ML INFRASTRUCTURE ===
  
  # TensorFlow Serving for ML Models
  tensorflow-serving:
    image: tensorflow/serving:latest-gpu
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC
    environment:
      - MODEL_CONFIG_FILE=/models/models.config
      - MONITORING_CONFIG_FILE=/models/monitoring.config
    volumes:
      - ml-models:/models
    networks:
      - tms-network
    restart: unless-stopped

  # MLflow for Model Management
  mlflow-server:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://mlflow:mlflow123@postgres:5432/mlflow
               --default-artifact-root /mlflow/artifacts"
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    networks:
      - tms-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Jupyter Hub for Data Science
  jupyterhub:
    image: jupyterhub/jupyterhub:latest
    ports:
      - "8000:8000"
    environment:
      - JUPYTERHUB_CRYPT_KEY=autonomous-learning-key-2024
    volumes:
      - jupyterhub-data:/srv/jupyterhub
      - jupyter-notebooks:/home
    networks:
      - tms-network
    restart: unless-stopped

  # === AUTONOMOUS MONITORING ===
  
  # Autonomous Metrics Collector
  autonomous-prometheus:
    image: prom/prometheus:latest
    ports:
      - "9092:9090"
    volumes:
      - ./autonomous-prometheus.yml:/etc/prometheus/prometheus.yml
      - autonomous-metrics-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - tms-network
    restart: unless-stopped

  # Intelligent Alerting
  intelligent-alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9094:9093"
    volumes:
      - ./intelligent-alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - intelligent-alerts-data:/alertmanager
    networks:
      - tms-network
    restart: unless-stopped

  # Autonomous Grafana
  autonomous-grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=autonomous123
      - GF_INSTALL_PLUGINS=grafana-ml-app,grafana-kubernetes-app
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    volumes:
      - autonomous-grafana-data:/var/lib/grafana
      - ./autonomous-grafana-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - tms-network
    restart: unless-stopped

  # === INTELLIGENT DATA PROCESSING ===
  
  # Apache Kafka for Event Streaming
  kafka-autonomous:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9093:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-autonomous:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-autonomous:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-autonomous-data:/var/lib/kafka/data
    networks:
      - tms-network
    depends_on:
      - zookeeper-autonomous
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper-autonomous:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2182:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-autonomous-data:/var/lib/zookeeper/data
    networks:
      - tms-network
    restart: unless-stopped

  # Apache Airflow for Workflow Orchestration
  airflow-autonomous:
    image: apache/airflow:2.7.2
    ports:
      - "8081:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=autonomous-fernet-key-2024
      - AIRFLOW__WEBSERVER__SECRET_KEY=autonomous-secret-key-2024
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    networks:
      - tms-network
    depends_on:
      - postgres
    restart: unless-stopped

  # === EXTEND EXISTING SERVICES FROM PHASE 8 ===
  
  # Include all services from Phase 8
  quantum-security-service:
    extends:
      file: docker-compose.phase8.yml
      service: quantum-security-service

  edge-computing-service:
    extends:
      file: docker-compose.phase8.yml
      service: edge-computing-service

  blockchain-service:
    extends:
      file: docker-compose.phase8.yml
      service: blockchain-service

  # Include all services from Phase 7
  ai-autoscaler-service:
    extends:
      file: docker-compose.phase8.yml
      service: ai-autoscaler-service

  performance-optimizer-service:
    extends:
      file: docker-compose.phase8.yml
      service: performance-optimizer-service

  chaos-engineering-service:
    extends:
      file: docker-compose.phase8.yml
      service: chaos-engineering-service

  # Include core microservices
  api-gateway:
    extends:
      file: docker-compose.phase8.yml
      service: api-gateway

  auth-service:
    extends:
      file: docker-compose.phase8.yml
      service: auth-service

  user-service:
    extends:
      file: docker-compose.phase8.yml
      service: user-service

  quiz-service:
    extends:
      file: docker-compose.phase8.yml
      service: quiz-service

  sikkerhetskontroll-service:
    extends:
      file: docker-compose.phase8.yml
      service: sikkerhetskontroll-service

  hr-service:
    extends:
      file: docker-compose.phase8.yml
      service: hr-service

  economy-service:
    extends:
      file: docker-compose.phase8.yml
      service: economy-service

  graphql-service:
    extends:
      file: docker-compose.phase8.yml
      service: graphql-service

  notification-service:
    extends:
      file: docker-compose.phase8.yml
      service: notification-service

  ml-service:
    extends:
      file: docker-compose.phase8.yml
      service: ml-service

  observability-service:
    extends:
      file: docker-compose.phase8.yml
      service: observability-service

  # === DATABASES & STORAGE ===
  
  postgres:
    extends:
      file: docker-compose.phase8.yml
      service: postgres
    environment:
      - POSTGRES_MULTIPLE_DATABASES=mlflow,airflow

  redis:
    extends:
      file: docker-compose.phase8.yml
      service: redis

  elasticsearch:
    extends:
      file: docker-compose.phase8.yml
      service: elasticsearch

  # === MONITORING ===
  
  prometheus:
    extends:
      file: docker-compose.phase8.yml
      service: prometheus

  grafana:
    extends:
      file: docker-compose.phase8.yml
      service: grafana

  jaeger:
    extends:
      file: docker-compose.phase8.yml
      service: jaeger

  # === INFRASTRUCTURE ===
  
  traefik:
    extends:
      file: docker-compose.phase8.yml
      service: traefik

  vault:
    extends:
      file: docker-compose.phase8.yml
      service: vault

  consul:
    extends:
      file: docker-compose.phase8.yml
      service: consul

networks:
  tms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  # Autonomous volumes
  autonomous-data:
  autonomous-models:
  
  # Self-healing volumes
  healing-data:
  healing-logs:
  healing-kubeconfig:
  healing-scripts:
  
  # Intelligent learning volumes
  ml-models:
  knowledge-graph:
  learning-data:
  
  # AI/ML infrastructure volumes
  decision-models:
  decision-notebooks:
  pattern-data:
  pattern-models:
  neo4j-knowledge-data:
  neo4j-knowledge-logs:
  mlflow-artifacts:
  jupyterhub-data:
  jupyter-notebooks:
  
  # Monitoring volumes
  autonomous-metrics-data:
  intelligent-alerts-data:
  autonomous-grafana-data:
  
  # Data processing volumes
  kafka-autonomous-data:
  zookeeper-autonomous-data:
  airflow-dags:
  airflow-logs:
  airflow-plugins:
  
  # Extend existing volumes from previous phases
  postgres-data:
  redis-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  redis-cluster-data:
  influxdb-data:
  rabbitmq-data:
  traefik-acme:
  
  # Phase 8 volumes
  quantum-metrics-data:
  edge-k3s-data:
  edge-kubeconfig:
  edge-sync-config:
  edge-sync-data:
  edge-analytics-data:
  blockchain-data:
  geth-data:
  ipfs-data:
  compiled-contracts:
  blockchain-analytics-data:
  qml-notebooks:
  qml-models:
  neural-models:
  ztna-config:
  hsm-data: 