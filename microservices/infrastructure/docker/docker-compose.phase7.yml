version: '3.8'

services:
  # === FASE 7: AI & OPTIMIZATION SERVICES ===
  
  # AI Auto-Scaler Service (Port 8011)
  ai-autoscaler-service:
    build:
      context: ../../services/ai-autoscaler-service
      dockerfile: Dockerfile
    ports:
      - "8011:8011"
    environment:
      - NODE_ENV=production
      - PORT=8011
      - PROMETHEUS_URL=http://prometheus:9090
      - KUBERNETES_API_URL=https://kubernetes.default.svc
      - REDIS_URL=redis://redis-cluster:6379
    depends_on:
      - prometheus
      - redis-cluster
    networks:
      - tms-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-autoscaler.rule=Host(`ai-autoscaler.tms.local`)"
      - "traefik.http.services.ai-autoscaler.loadbalancer.server.port=8011"

  # Performance Optimizer Service (Port 8012)
  performance-optimizer-service:
    build:
      context: ../../services/performance-optimizer-service
      dockerfile: Dockerfile
    ports:
      - "8012:8012"
    environment:
      - NODE_ENV=production
      - PORT=8012
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/tms_performance
      - REDIS_URL=redis://redis-cluster:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - postgres
      - redis-cluster
      - elasticsearch
    networks:
      - tms-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.performance-optimizer.rule=Host(`performance.tms.local`)"
      - "traefik.http.services.performance-optimizer.loadbalancer.server.port=8012"

  # Chaos Engineering Service (Port 8013)
  chaos-engineering-service:
    build:
      context: ../../services/chaos-engineering-service
      dockerfile: Dockerfile
    ports:
      - "8013:8013"
    environment:
      - NODE_ENV=production
      - PORT=8013
      - KUBERNETES_API_URL=https://kubernetes.default.svc
      - PROMETHEUS_URL=http://prometheus:9090
      - SAFETY_MODE=enabled
    depends_on:
      - prometheus
    networks:
      - tms-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    privileged: true  # Required for chaos experiments
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chaos-engineering.rule=Host(`chaos.tms.local`)"
      - "traefik.http.services.chaos-engineering.loadbalancer.server.port=8013"

  # === AI/ML INFRASTRUCTURE ===
  
  # TensorFlow Serving for ML Models
  tensorflow-serving:
    image: tensorflow/serving:2.13.0
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC API
    environment:
      - MODEL_NAME=tms_prediction_model
      - MODEL_BASE_PATH=/models
    volumes:
      - ./ml-models:/models
    networks:
      - tms-network
    restart: unless-stopped

  # MLflow Model Registry
  mlflow:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:password@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server 
          --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    depends_on:
      - postgres
    networks:
      - tms-network
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    restart: unless-stopped

  # === ADVANCED MONITORING & OBSERVABILITY ===
  
  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - tms-network
    restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.81.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - tms-network
    restart: unless-stopped

  # === ENHANCED SECURITY ===
  
  # HashiCorp Vault for Secrets Management
  vault:
    image: vault:1.14.0
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=tms-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - tms-network
    restart: unless-stopped

  # Consul for Service Discovery
  consul:
    image: consul:1.16.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: >
      consul agent 
        -server 
        -bootstrap-expect=1 
        -ui 
        -client=0.0.0.0 
        -bind=0.0.0.0
    networks:
      - tms-network
    restart: unless-stopped

  # === MESSAGE QUEUES & STREAMING ===
  
  # Apache Kafka for Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - tms-network
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - tms-network
    restart: unless-stopped

  # RabbitMQ for Message Queuing
  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=tms
      - RABBITMQ_DEFAULT_PASS=tms-password
    networks:
      - tms-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped

  # === ENHANCED DATABASES ===
  
  # Redis Cluster for Distributed Caching
  redis-cluster:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server 
        --cluster-enabled yes 
        --cluster-config-file nodes.conf 
        --cluster-node-timeout 5000 
        --appendonly yes
    networks:
      - tms-network
    volumes:
      - redis-cluster-data:/data
    restart: unless-stopped

  # InfluxDB for Time Series Data
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=tms
      - DOCKER_INFLUXDB_INIT_PASSWORD=tms-password
      - DOCKER_INFLUXDB_INIT_ORG=tms-org
      - DOCKER_INFLUXDB_INIT_BUCKET=tms-metrics
    networks:
      - tms-network
    volumes:
      - influxdb-data:/var/lib/influxdb2
    restart: unless-stopped

  # === LOAD BALANCING & PROXY ===
  
  # Traefik as Advanced Load Balancer
  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@tms.local
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-acme:/acme.json
    networks:
      - tms-network
    restart: unless-stopped

  # === EXISTING SERVICES (from previous phases) ===
  
  # Include all services from Phase 6
  api-gateway:
    extends:
      file: docker-compose.microservices.yml
      service: api-gateway
    depends_on:
      - consul
      - vault

  auth-service:
    extends:
      file: docker-compose.microservices.yml
      service: auth-service
    depends_on:
      - vault
      - consul

  user-service:
    extends:
      file: docker-compose.microservices.yml
      service: user-service

  quiz-service:
    extends:
      file: docker-compose.microservices.yml
      service: quiz-service

  sikkerhetskontroll-service:
    extends:
      file: docker-compose.microservices.yml
      service: sikkerhetskontroll-service

  hr-service:
    extends:
      file: docker-compose.microservices.yml
      service: hr-service

  economy-service:
    extends:
      file: docker-compose.microservices.yml
      service: economy-service

  graphql-service:
    extends:
      file: docker-compose.microservices.yml
      service: graphql-service

  notification-service:
    extends:
      file: docker-compose.microservices.yml
      service: notification-service

  ml-service:
    extends:
      file: docker-compose.microservices.yml
      service: ml-service

  observability-service:
    extends:
      file: docker-compose.microservices.yml
      service: observability-service

  # === DATABASES ===
  
  postgres:
    extends:
      file: docker-compose.microservices.yml
      service: postgres

  redis:
    extends:
      file: docker-compose.microservices.yml
      service: redis

  elasticsearch:
    extends:
      file: docker-compose.microservices.yml
      service: elasticsearch

  # === MONITORING ===
  
  prometheus:
    extends:
      file: docker-compose.microservices.yml
      service: prometheus

  grafana:
    extends:
      file: docker-compose.microservices.yml
      service: grafana

  kibana:
    extends:
      file: docker-compose.microservices.yml
      service: kibana

networks:
  tms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # AI/ML volumes
  mlflow-artifacts:
  
  # Database volumes
  redis-cluster-data:
  influxdb-data:
  rabbitmq-data:
  
  # Security volumes
  traefik-acme:
  
  # Extend existing volumes
  postgres-data:
  redis-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data: