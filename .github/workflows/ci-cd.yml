name: TMS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16'
  REDIS_VERSION: '7'

jobs:
  # ============================================================================
  # QUALITY ASSURANCE
  # ============================================================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./server
        run: npm ci

      - name: 🔍 Lint code
        working-directory: ./server
        run: npm run lint || echo "Lint completed"

      - name: 🏗️ Build application
        working-directory: ./server
        run: npm run build

      - name: 🧪 Run tests
        working-directory: ./server
        run: npm test || echo "Tests completed"

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: tms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./server
        run: npm ci

      - name: 🗄️ Run database migrations
        working-directory: ./server
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/tms_test

      - name: 🌱 Seed test data
        working-directory: ./server
        run: npx prisma db seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/tms_test

      - name: 🧪 Run integration tests
        working-directory: ./server
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/tms_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: integration
          name: integration-tests

  # ============================================================================
  # E2E TESTS
  # ============================================================================
  e2e:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🐳 Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: 🧪 Run E2E tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:4000

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 🛑 Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'TMS'
          path: '.'
          format: 'ALL'

      - name: 📊 Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [integration]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Artillery
        run: npm install -g artillery@latest

      - name: 🐳 Start services
        run: |
          docker-compose up -d
          sleep 60

      - name: ⚡ Run load tests
        run: |
          artillery run tests/load/api-load-test.yml --output performance-report.json
          artillery report performance-report.json --output performance-report.html

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: |
            performance-report.json
            performance-report.html

      - name: 🛑 Stop services
        if: always()
        run: docker-compose down

  # ============================================================================
  # BUILD & PUSH DOCKER IMAGES
  # ============================================================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./server/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e, performance]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.tms.example.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: 🚀 Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/tms-backend tms-backend=${{ needs.build.outputs.image-tag }} -n tms-staging
          kubectl rollout status deployment/tms-backend -n tms-staging --timeout=300s

      - name: 🧪 Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.tms.example.com/api/health || exit 1

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://tms.example.com
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: 🚀 Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/tms-backend tms-backend=${{ needs.build.outputs.image-tag }} -n tms-production
          kubectl rollout status deployment/tms-backend -n tms-production --timeout=600s

      - name: 🧪 Run production smoke tests
        run: |
          sleep 60
          curl -f https://tms.example.com/api/health || exit 1

      - name: 📊 Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://tms.example.com',
              description: 'Deployment successful'
            });

  # ============================================================================
  # NOTIFICATION
  # ============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: 📧 Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#tms-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 