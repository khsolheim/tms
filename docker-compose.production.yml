version: '3.8'

services:
  # =============================================================================
  # PRODUCTION FRONTEND (Client)
  # =============================================================================
  tms-client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=https://api.yourdomain.com
        - REACT_APP_SENTRY_DSN=${CLIENT_SENTRY_DSN}
    container_name: tms-client-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - tms-production
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - tms-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # PRODUCTION BACKEND (API Server)
  # =============================================================================
  tms-backend:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
    container_name: tms-backend-prod
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HOST=0.0.0.0
      # Database
      - DATABASE_URL=postgresql://tms_prod_user:${DB_PASSWORD}@postgres-prod:5432/tms_production
      - DATABASE_MAX_CONNECTIONS=25
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-prod:6379
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - BCRYPT_ROUNDS=14
      # CORS
      - CORS_ORIGIN=${CORS_ORIGIN}
      # Monitoring
      - PROMETHEUS_METRICS=true
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=warn
    networks:
      - tms-production
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/app/logs
      - app-backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      replicas: 2

  # =============================================================================
  # PRODUCTION DATABASE (PostgreSQL)
  # =============================================================================
  postgres-prod:
    image: postgres:16-alpine
    container_name: tms-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=tms_production
      - POSTGRES_USER=tms_prod_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      # Performance tuning
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    ports:
      - "5432:5432"
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
      - ./database/init-prod:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - tms-production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tms_prod_user -d tms_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # =============================================================================
  # PRODUCTION CACHE (Redis)
  # =============================================================================
  redis-prod:
    image: redis:7-alpine
    container_name: tms-redis-prod
    restart: unless-stopped
    command: |
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis-prod-data:/data
      - ./redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      - tms-production
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # PRODUCTION MONITORING (Prometheus)
  # =============================================================================
  prometheus-prod:
    image: prom/prometheus:v2.54.1
    container_name: tms-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus-prod-data:/prometheus
    networks:
      - tms-production
    depends_on:
      - tms-backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # PRODUCTION DASHBOARD (Grafana)
  # =============================================================================
  grafana-prod:
    image: grafana/grafana:latest
    container_name: tms-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      # Security headers
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=true
    volumes:
      - grafana-prod-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - tms-production
    depends_on:
      - prometheus-prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # NGINX REVERSE PROXY & SSL TERMINATION
  # =============================================================================
  nginx-prod:
    image: nginx:alpine
    container_name: tms-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      # Rate limiting
      - nginx-cache:/var/cache/nginx
    networks:
      - tms-production
    depends_on:
      - tms-backend
      - grafana-prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  # =============================================================================
  # ALERTMANAGER FOR ALERTS
  # =============================================================================
  alertmanager-prod:
    image: prom/alertmanager:latest
    container_name: tms-alertmanager-prod
    restart: unless-stopped
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.yourdomain.com'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./monitoring/alertmanager/alertmanager.prod.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-prod-data:/alertmanager
    networks:
      - tms-production
    depends_on:
      - prometheus-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  backup-service:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: tms-backup-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tms_prod_user:${DB_PASSWORD}@postgres-prod:5432/tms_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-prod:6379
      - BACKUP_SCHEDULE=0 2 * * *
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - app-backups:/app/backups
      - postgres-prod-data:/postgres-data:ro
      - redis-prod-data:/redis-data:ro
    networks:
      - tms-production
    depends_on:
      - postgres-prod
      - redis-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  tms-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/data/postgres
  
  redis-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/data/redis
  
  prometheus-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/data/prometheus
  
  grafana-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/data/grafana
  
  alertmanager-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/data/alertmanager
  
  app-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/data/uploads
  
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/logs
  
  app-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/tms/backups
  
  nginx-cache:
    driver: local 