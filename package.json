{
  "name": "tms-system",
  "version": "1.0.0",
  "description": "TMS - Treningssystem for Sikkerhetskontroll",
  "private": true,
  "author": "TMS Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "workspaces": [
    "client",
    "server",
    "admin",
    "mobile"
  ],
  "scripts": {
    "install:all": "npm install && npm run install:client && npm run install:server && npm run install:admin && npm run install:mobile",
    "install:client": "cd client && npm install",
    "install:server": "cd server && npm install",
    "install:admin": "cd admin && npm install",
    "install:mobile": "cd mobile && npm install",
    
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\" \"npm run dev:admin\"",
    "dev:client": "cd client && npm run start",
    "dev:server": "cd server && npm run dev",
    "dev:admin": "cd admin && npm run start",
    "dev:mobile": "cd mobile && npm run start",
    
    "build": "npm run build:client && npm run build:server && npm run build:admin",
    "build:client": "cd client && npm run build",
    "build:server": "cd server && npm run build",
    "build:admin": "cd admin && npm run build",
    "build:mobile": "cd mobile && npm run build",
    
    "test": "npm run test:client && npm run test:server",
    "test:client": "cd client && npm run test",
    "test:server": "cd server && npm run test",
    "test:e2e": "playwright test",
    
    "lint": "npm run lint:client && npm run lint:server",
    "lint:client": "cd client && npm run lint",
    "lint:server": "cd server && npm run lint",
    "lint:fix": "npm run lint:client -- --fix && npm run lint:server -- --fix",
    
    "type-check": "npm run type-check:client && npm run type-check:server",
    "type-check:client": "cd client && npx tsc --noEmit",
    "type-check:server": "cd server && npx tsc --noEmit",
    
    "clean": "npm run clean:client && npm run clean:server && npm run clean:admin",
    "clean:client": "cd client && rm -rf build node_modules",
    "clean:server": "cd server && rm -rf dist node_modules",
    "clean:admin": "cd admin && rm -rf build node_modules",
    
    "docker:build": "docker-compose -f docker-compose.production.yml build",
    "docker:up": "docker-compose -f docker-compose.production.yml up -d",
    "docker:down": "docker-compose -f docker-compose.production.yml down",
    "docker:logs": "docker-compose -f docker-compose.production.yml logs -f",
    
    "production:check": "./scripts/production-readiness-check.sh",
    "production:deploy": "./scripts/deploy-production.sh",
    "production:backup": "cd server && npm run backup:create",
    "production:restore": "cd server && npm run backup:restore",
    
    "setup:env": "cp .env.example .env.production && echo 'Please edit .env.production with your settings'",
    "setup:ssl": "mkdir -p nginx/ssl && echo 'Please add your SSL certificates to nginx/ssl/'",
    "setup:db": "cd server && npm run prisma:migrate && npm run prisma:seed",
    
    "security:audit": "npm audit --audit-level moderate",
    "security:fix": "npm audit fix",
    "security:check": "cd server && npm run security:check",
    
    "monitoring:up": "docker-compose -f monitoring/docker-compose.monitoring.yml up -d",
    "monitoring:down": "docker-compose -f monitoring/docker-compose.monitoring.yml down",
    
    "microservices:up": "cd microservices && ./scripts/start-microservices.sh",
    "microservices:down": "cd microservices && ./scripts/stop-microservices.sh",
    
    "logs:client": "docker-compose -f docker-compose.production.yml logs -f tms-client",
    "logs:server": "docker-compose -f docker-compose.production.yml logs -f tms-server",
    "logs:db": "docker-compose -f docker-compose.production.yml logs -f tms-database",
    
    "status": "docker-compose -f docker-compose.production.yml ps",
    "health": "curl -f http://localhost/health && curl -f http://localhost:4000/api/v1/health"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "@playwright/test": "^1.44.0"
  },
  "keywords": [
    "tms",
    "sikkerhetskontroll",
    "treningssystem",
    "react",
    "nodejs",
    "typescript",
    "postgresql",
    "docker"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/tms-system.git"
  },
  "bugs": {
    "url": "https://github.com/yourusername/tms-system/issues"
  },
  "homepage": "https://github.com/yourusername/tms-system#readme"
}
