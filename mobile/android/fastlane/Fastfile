# TMS Mobile App - Android Fastlane Configuration
#
# Automates Play Store deployment

default_platform(:android)

platform :android do
  # Configuration
  APP_NAME = "TMS"
  PACKAGE_NAME = "no.tms.mobile"

  before_all do
    ensure_git_status_clean
    ensure_git_branch(branch: 'main')
    
    # Set up Google Play service account
    ENV["SUPPLY_JSON_KEY_DATA"] = ENV["GOOGLE_PLAY_SERVICE_ACCOUNT_JSON"]
  end

  # Development build
  desc "Build debug APK"
  lane :dev do
    gradle(
      task: "clean assembleDebug",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      }
    )
    
    # Copy APK to build directory
    sh("mkdir -p ../build/android/")
    sh("cp app/build/outputs/apk/debug/app-debug.apk ../build/android/TMS-debug.apk")
    
    UI.success("‚úÖ Debug build completed!")
  end

  # Internal testing
  desc "Deploy to Play Store Internal Testing"
  lane :internal do
    # Increment version code
    increment_version_code(
      gradle_file_path: "app/build.gradle"
    )
    
    # Build AAB for Play Store
    gradle(
      task: "clean bundleRelease",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      }
    )
    
    # Upload to Play Store Internal Testing
    upload_to_play_store(
      track: "internal",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: false,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    # Send notifications
    send_slack_notification(
      title: "üöÄ TMS Android Internal Build",
      message: "New internal testing version uploaded to Play Store",
      success: true
    )
    
    UI.success("‚úÖ Internal testing deployment completed!")
  end

  # Beta testing
  desc "Deploy to Play Store Beta Testing"
  lane :beta do
    # Increment version code
    increment_version_code(
      gradle_file_path: "app/build.gradle"
    )
    
    # Build AAB for Play Store
    gradle(
      task: "clean bundleRelease",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      }
    )
    
    # Upload to Play Store Beta Testing
    upload_to_play_store(
      track: "beta",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      skip_upload_apk: true,
      skip_upload_metadata: false,
      skip_upload_changelogs: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
    
    # Send notifications
    send_slack_notification(
      title: "üöÄ TMS Android Beta Deployed",
      message: "New beta version uploaded to Play Store",
      success: true
    )
    
    UI.success("‚úÖ Beta deployment completed!")
  end

  # Production release
  desc "Deploy to Play Store Production"
  lane :release do
    # Increment version code
    increment_version_code(
      gradle_file_path: "app/build.gradle"
    )
    
    # Build AAB for Play Store
    gradle(
      task: "clean bundleRelease",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      }
    )
    
    # Upload to Play Store Production
    upload_to_play_store(
      track: "production",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      skip_upload_apk: true,
      skip_upload_metadata: false,
      skip_upload_changelogs: false,
      skip_upload_images: false,
      skip_upload_screenshots: false,
      release_status: "draft"  # Manual review before going live
    )
    
    # Send notifications
    send_slack_notification(
      title: "üéâ TMS Android Released",
      message: "New production version uploaded to Play Store",
      success: true
    )
    
    UI.success("‚úÖ Production release completed!")
  end

  # Promote beta to production
  desc "Promote beta version to production"
  lane :promote do
    upload_to_play_store(
      track: "beta",
      track_promote_to: "production",
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: false,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    UI.success("‚úÖ Beta promoted to production!")
  end

  # Metadata update
  desc "Update Play Store metadata"
  lane :metadata do
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: false,
      skip_upload_changelogs: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
    
    UI.success("‚úÖ Metadata updated!")
  end

  # Screenshots
  desc "Generate app screenshots"
  lane :screenshots do
    # Build debug APK for screenshots
    gradle(task: "clean assembleDebug assembleAndroidTest")
    
    # Capture screenshots using Screengrab
    screengrab(
      locales: ["en-US", "nb-NO"],
      clear_previous_screenshots: true,
      app_package_name: PACKAGE_NAME,
      use_tests_in_packages: ["no.tms.mobile.screenshots"],
      app_apk_path: "app/build/outputs/apk/debug/app-debug.apk",
      tests_apk_path: "app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    )
    
    # Upload screenshots to Play Store
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
    
    UI.success("‚úÖ Screenshots generated and uploaded!")
  end

  # Testing
  desc "Run tests"
  lane :test do
    gradle(task: "clean testDebugUnitTest")
    
    UI.success("‚úÖ Tests completed!")
  end

  # Static analysis
  desc "Run static code analysis"
  lane :analyze do
    gradle(task: "clean lintDebug")
    
    # Upload results to external service if configured
    if ENV["SONARQUBE_HOST"]
      gradle(task: "sonarqube")
    end
    
    UI.success("‚úÖ Static analysis completed!")
  end

  # Clean up
  desc "Clean build artifacts"
  lane :clean do
    gradle(task: "clean")
    
    # Remove build directory
    sh("rm -rf ../build/")
    
    UI.success("‚úÖ Clean completed!")
  end

  # Private lanes

  private_lane :send_slack_notification do |options|
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: options[:message],
        success: options[:success],
        slack_url: ENV["SLACK_WEBHOOK_URL"],
        channel: "#tms-releases",
        username: "TMS Deploy Bot",
        icon_emoji: ":robot_face:",
        payload: {
          "Build": ENV["BUILD_NUMBER"] || "Unknown",
          "Version": ENV["VERSION"] || "Unknown",
          "Platform": "Android"
        }
      )
    end
  end

  private_lane :increment_version_code do |options|
    path = options[:gradle_file_path]
    current_version_code = google_play_track_version_codes(
      package_name: PACKAGE_NAME,
      track: "production"
    ).max
    
    new_version_code = current_version_code + 1
    
    # Update build.gradle
    sh("sed -i '' 's/versionCode [0-9]*/versionCode #{new_version_code}/' #{path}")
    
    UI.important("Version code updated to: #{new_version_code}")
  end

  # Error handling
  error do |lane, exception|
    send_slack_notification(
      title: "‚ùå TMS Android Build Failed",
      message: "#{lane} failed: #{exception.message}",
      success: false
    )
  end

  after_all do |lane|
    # Clean up
    gradle(task: "clean")
    
    UI.success("üéâ Lane #{lane} completed successfully!")
  end
end

# Helper methods
def ensure_signing_config
  unless ENV["ANDROID_KEYSTORE_PATH"] && ENV["ANDROID_KEYSTORE_PASSWORD"]
    UI.user_error!("Android signing configuration not found!")
  end
end 