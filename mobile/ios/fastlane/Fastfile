# TMS Mobile App - iOS Fastlane Configuration
#
# Automates TestFlight and App Store deployment

default_platform(:ios)

platform :ios do
  # App Store Connect API key for authentication
  app_store_connect_api_key(
    key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
    issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
    key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"]
  )

  # Configuration
  APP_NAME = "TMS"
  BUNDLE_ID = "no.tms.mobile"
  SCHEME = "TMS"
  WORKSPACE = "TMS.xcworkspace"

  before_all do
    ensure_git_status_clean
    ensure_git_branch(branch: 'main')
  end

  # Development build
  desc "Build for development"
  lane :dev do
    increment_build_number(xcodeproj: "TMS.xcodeproj")
    
    build_app(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Debug",
      export_method: "development",
      output_directory: "../build/ios/",
      output_name: "TMS-dev.ipa"
    )
    
    UI.success("‚úÖ Development build completed!")
  end

  # TestFlight deployment
  desc "Deploy to TestFlight"
  lane :beta do
    # Ensure we have the latest provisioning profile
    match(type: "appstore")
    
    # Increment build number
    increment_build_number(xcodeproj: "TMS.xcodeproj")
    
    # Build the app
    build_app(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      export_method: "app-store",
      output_directory: "../build/ios/",
      output_name: "TMS-release.ipa"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: false,
      notify_external_testers: true,
      groups: ["TMS Beta Testers"],
      changelog: generate_changelog
    )
    
    # Send notifications
    send_slack_notification(
      title: "üöÄ TMS iOS Beta Deployed",
      message: "New beta version uploaded to TestFlight",
      success: true
    )
    
    UI.success("‚úÖ Beta deployment completed!")
  end

  # App Store release
  desc "Deploy to App Store"
  lane :release do
    # Ensure we have the latest provisioning profile
    match(type: "appstore")
    
    # Build the app
    build_app(
      workspace: WORKSPACE,
      scheme: SCHEME,
      configuration: "Release",
      export_method: "app-store",
      output_directory: "../build/ios/",
      output_name: "TMS-appstore.ipa"
    )
    
    # Upload to App Store
    upload_to_app_store(
      force: true,
      reject_if_possible: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false
    )
    
    # Send notifications
    send_slack_notification(
      title: "üéâ TMS iOS Released",
      message: "New version uploaded to App Store",
      success: true
    )
    
    UI.success("‚úÖ App Store release completed!")
  end

  # Metadata update
  desc "Update App Store metadata"
  lane :metadata do
    deliver(
      skip_binary_upload: true,
      skip_screenshots: false,
      force: true
    )
    
    UI.success("‚úÖ Metadata updated!")
  end

  # Certificate management
  desc "Sync certificates and provisioning profiles"
  lane :certificates do
    match(
      type: "development",
      readonly: false,
      force_for_new_devices: true
    )
    
    match(
      type: "appstore",
      readonly: false
    )
    
    UI.success("‚úÖ Certificates synced!")
  end

  # Screenshots
  desc "Generate app screenshots"
  lane :screenshots do
    capture_screenshots(
      workspace: WORKSPACE,
      scheme: "TMSUITests",
      devices: [
        "iPhone 14 Pro Max",
        "iPhone 14 Pro",
        "iPhone SE (3rd generation)",
        "iPad Pro (12.9-inch) (6th generation)"
      ],
      languages: ["en-US", "nb-NO"],
      output_directory: "./fastlane/screenshots/"
    )
    
    # Upload to App Store Connect
    deliver(
      skip_binary_upload: true,
      skip_metadata: true,
      skip_screenshots: false,
      force: true
    )
    
    UI.success("‚úÖ Screenshots generated and uploaded!")
  end

  # Testing
  desc "Run tests"
  lane :test do
    run_tests(
      workspace: WORKSPACE,
      scheme: SCHEME,
      devices: ["iPhone 14 Pro"],
      code_coverage: true,
      output_directory: "../build/test-results/"
    )
    
    UI.success("‚úÖ Tests completed!")
  end

  # Clean up
  desc "Clean build artifacts"
  lane :clean do
    clear_derived_data
    
    # Remove build directory
    sh("rm -rf ../build/")
    
    UI.success("‚úÖ Clean completed!")
  end

  # Private lanes

  private_lane :generate_changelog do
    changelog = changelog_from_git_commits(
      commits_count: 10,
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "exclude_merges"
    )
    
    # Fallback changelog
    if changelog.empty?
      changelog = "Bug fixes and performance improvements"
    end
    
    changelog
  end

  private_lane :send_slack_notification do |options|
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: options[:message],
        success: options[:success],
        slack_url: ENV["SLACK_WEBHOOK_URL"],
        channel: "#tms-releases",
        username: "TMS Deploy Bot",
        icon_emoji: ":rocket:",
        payload: {
          "Build": ENV["BUILD_NUMBER"] || "Unknown",
          "Version": ENV["VERSION"] || "Unknown",
          "Platform": "iOS"
        }
      )
    end
  end

  # Error handling
  error do |lane, exception|
    send_slack_notification(
      title: "‚ùå TMS iOS Build Failed",
      message: "#{lane} failed: #{exception.message}",
      success: false
    )
  end

  after_all do |lane|
    # Clean up
    clear_derived_data
    
    UI.success("üéâ Lane #{lane} completed successfully!")
  end
end

# Helper methods
def ensure_version_bump
  version = get_version_number(target: "TMS")
  build = get_build_number(xcodeproj: "TMS.xcodeproj")
  
  UI.important("Current version: #{version} (#{build})")
end 