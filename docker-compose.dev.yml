version: '3.8'

services:
  # Frontend applications
  client-dev:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:4000
      - REACT_APP_ADMIN_URL=http://localhost:3001
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  admin-dev:
    build:
      context: ./admin
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./admin/src:/app/src
      - ./admin/public:/app/public
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:4000
      - REACT_APP_CLIENT_URL=http://localhost:3000
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend API
  backend-dev:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "4000:4000"
    volumes:
      - ./server/src:/app/src
      - ./server/prisma:/app/prisma
      - ./server/uploads:/app/uploads
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - API_GATEWAY_URL=http://api-gateway:8000
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network

  # Database
  postgres-dev:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=tms_db
      - POSTGRES_USER=tms_user
      - POSTGRES_PASSWORD=tms_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - tms-network

  # Redis Cache
  redis-dev:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - tms-network

  # ===========================================
  # MICROSERVICES ARCHITECTURE (Ports 8000-8028)
  # ===========================================

  # API Gateway (Port 8000)
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - JWT_SECRET=dev-jwt-secret-key
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - AUTH_SERVICE_URL=http://auth-service:8001
      - USER_SERVICE_URL=http://user-service:8002
      - QUIZ_SERVICE_URL=http://quiz-service:8003
      - SIKKERHETSKONTROLL_SERVICE_URL=http://sikkerhetskontroll-service:8004
      - HR_SERVICE_URL=http://hr-service:8005
      - ECONOMY_SERVICE_URL=http://economy-service:8006
      - GRAPHQL_SERVICE_URL=http://graphql-service:8007
      - NOTIFICATION_SERVICE_URL=http://notification-service:8008
      - ML_SERVICE_URL=http://ml-service:8009
      - OBSERVABILITY_SERVICE_URL=http://observability-service:8010
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service (Port 8001)
  auth-service:
    build:
      context: ./microservices/services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - PORT=8001
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service (Port 8002)
  user-service:
    build:
      context: ./microservices/services/user-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=development
      - PORT=8002
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Quiz Service (Port 8003)
  quiz-service:
    build:
      context: ./microservices/services/quiz-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=development
      - PORT=8003
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sikkerhetskontroll Service (Port 8004)
  sikkerhetskontroll-service:
    build:
      context: ./microservices/services/sikkerhetskontroll-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=development
      - PORT=8004
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    volumes:
      - sikkerhet_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HR Service (Port 8005)
  hr-service:
    build:
      context: ./microservices/services/hr-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - NODE_ENV=development
      - PORT=8005
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Economy Service (Port 8006)
  economy-service:
    build:
      context: ./microservices/services/economy-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - NODE_ENV=development
      - PORT=8006
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GraphQL Service (Port 8007)
  graphql-service:
    build:
      context: ./microservices/services/graphql-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    environment:
      - NODE_ENV=development
      - PORT=8007
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service (Port 8008)
  notification-service:
    build:
      context: ./microservices/services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    environment:
      - NODE_ENV=development
      - PORT=8008
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service (Port 8009)
  ml-service:
    build:
      context: ./microservices/services/ml-service
      dockerfile: Dockerfile
    ports:
      - "8009:8009"
    environment:
      - NODE_ENV=development
      - PORT=8009
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    volumes:
      - ml_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Observability Service (Port 8010)
  observability-service:
    build:
      context: ./microservices/services/observability-service
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    environment:
      - NODE_ENV=development
      - PORT=8010
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    volumes:
      - observability_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockchain Service (Port 8011)
  blockchain-service:
    build:
      context: ./microservices/services/blockchain-service
      dockerfile: Dockerfile
    ports:
      - "8011:8011"
    environment:
      - NODE_ENV=development
      - PORT=8011
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Self-Healing Service (Port 8012)
  self-healing-service:
    build:
      context: ./microservices/services/self-healing-service
      dockerfile: Dockerfile
    ports:
      - "8012:8012"
    environment:
      - NODE_ENV=development
      - PORT=8012
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Performance Optimizer Service (Port 8013)
  performance-optimizer-service:
    build:
      context: ./microservices/services/performance-optimizer-service
      dockerfile: Dockerfile
    ports:
      - "8013:8013"
    environment:
      - NODE_ENV=development
      - PORT=8013
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Autoscaler Service (Port 8014)
  ai-autoscaler-service:
    build:
      context: ./microservices/services/ai-autoscaler-service
      dockerfile: Dockerfile
    ports:
      - "8014:8014"
    environment:
      - NODE_ENV=development
      - PORT=8014
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chaos Engineering Service (Port 8015)
  chaos-engineering-service:
    build:
      context: ./microservices/services/chaos-engineering-service
      dockerfile: Dockerfile
    ports:
      - "8015:8015"
    environment:
      - NODE_ENV=development
      - PORT=8015
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Edge Computing Service (Port 8016)
  edge-computing-service:
    build:
      context: ./microservices/services/edge-computing-service
      dockerfile: Dockerfile
    ports:
      - "8016:8016"
    environment:
      - NODE_ENV=development
      - PORT=8016
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Quantum Security Service (Port 8017)
  quantum-security-service:
    build:
      context: ./microservices/services/quantum-security-service
      dockerfile: Dockerfile
    ports:
      - "8017:8017"
    environment:
      - NODE_ENV=development
      - PORT=8017
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8017/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Autonomous Orchestrator Service (Port 8018)
  autonomous-orchestrator-service:
    build:
      context: ./microservices/services/autonomous-orchestrator-service
      dockerfile: Dockerfile
    ports:
      - "8018:8018"
    environment:
      - NODE_ENV=development
      - PORT=8018
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8018/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Intelligent Learning Service (Port 8019)
  intelligent-learning-service:
    build:
      context: ./microservices/services/intelligent-learning-service
      dockerfile: Dockerfile
    ports:
      - "8019:8019"
    environment:
      - NODE_ENV=development
      - PORT=8019
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8019/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sentient Consciousness Service (Port 8020)
  sentient-consciousness-service:
    build:
      context: ./microservices/services/sentient-consciousness-service
      dockerfile: Dockerfile
    ports:
      - "8020:8020"
    environment:
      - NODE_ENV=development
      - PORT=8020
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Quantum Consciousness Service (Port 8021)
  quantum-consciousness-service:
    build:
      context: ./microservices/services/quantum-consciousness-service
      dockerfile: Dockerfile
    ports:
      - "8021:8021"
    environment:
      - NODE_ENV=development
      - PORT=8021
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8021/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transcendent Intelligence Service (Port 8022)
  transcendent-intelligence-service:
    build:
      context: ./microservices/services/transcendent-intelligence-service
      dockerfile: Dockerfile
    ports:
      - "8022:8022"
    environment:
      - NODE_ENV=development
      - PORT=8022
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8022/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Interdimensional Travel Service (Port 8023)
  interdimensional-travel-service:
    build:
      context: ./microservices/services/interdimensional-travel-service
      dockerfile: Dockerfile
    ports:
      - "8023:8023"
    environment:
      - NODE_ENV=development
      - PORT=8023
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8023/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Multiversal Communication Service (Port 8024)
  multiversal-communication-service:
    build:
      context: ./microservices/services/multiversal-communication-service
      dockerfile: Dockerfile
    ports:
      - "8024:8024"
    environment:
      - NODE_ENV=development
      - PORT=8024
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8024/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Universe Creation Service (Port 8025)
  universe-creation-service:
    build:
      context: ./microservices/services/universe-creation-service
      dockerfile: Dockerfile
    ports:
      - "8025:8025"
    environment:
      - NODE_ENV=development
      - PORT=8025
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reality Manipulation Service (Port 8026)
  reality-manipulation-service:
    build:
      context: ./microservices/services/reality-manipulation-service
      dockerfile: Dockerfile
    ports:
      - "8026:8026"
    environment:
      - NODE_ENV=development
      - PORT=8026
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Absolute Transcendence Service (Port 8027)
  absolute-transcendence-service:
    build:
      context: ./microservices/services/absolute-transcendence-service
      dockerfile: Dockerfile
    ports:
      - "8027:8027"
    environment:
      - NODE_ENV=development
      - PORT=8027
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Omnipotent Reality Service (Port 8028)
  omnipotent-reality-service:
    build:
      context: ./microservices/services/omnipotent-reality-service
      dockerfile: Dockerfile
    ports:
      - "8028:8028"
    environment:
      - NODE_ENV=development
      - PORT=8028
      - DATABASE_URL=postgresql://tms_user:tms_password@postgres-dev:5432/tms_db
      - REDIS_URL=redis://redis-dev:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - tms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8028/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MONITORING & INFRASTRUCTURE
  # ===========================================

  # Prometheus for metrics
  prometheus-dev:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - tms-network

  # Grafana for dashboards
  grafana-dev:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_dev_data:/var/lib/grafana
    networks:
      - tms-network

  # Jaeger for tracing
  jaeger-dev:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - tms-network

volumes:
  postgres_dev_data:
  redis_dev_data:
  prometheus_dev_data:
  grafana_dev_data:
  sikkerhet_uploads:
  ml_models:
  observability_logs:

networks:
  tms-network:
    driver: bridge 